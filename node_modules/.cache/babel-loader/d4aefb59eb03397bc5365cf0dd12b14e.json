{"ast":null,"code":"import _taggedTemplateLiteral from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectSpread from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\n\nvar _jsxFileName = \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/views/Pools/Syrup.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  align-items: center;\\n  color: \", \";\\n  display: grid;\\n  grid-gap: 32px;\\n  grid-template-columns: 1fr;\\n  margin-left: auto;\\n  margin-right: auto;\\n  max-width: 250px;\\n  ul {\\n    margin: 0;\\n    padding: 0;\\n    list-style-type: none;\\n    font-size: 16px;\\n    li {\\n      margin-bottom: 4px;\\n    }\\n  }\\n  img {\\n    height: auto;\\n    max-width: 100%;\\n  }\\n  @media (min-width: 576px) {\\n    grid-template-columns: 1fr 1fr;\\n    margin: 0;\\n    max-width: none;\\n  }\\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport { Route, useRouteMatch } from 'react-router-dom';\nimport BigNumber from 'bignumber.js';\nimport styled from 'styled-components';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { Heading } from '@pancakeswap-libs/uikit';\nimport { BLOCKS_PER_YEAR } from 'config';\nimport orderBy from 'lodash/orderBy';\nimport partition from 'lodash/partition';\nimport useI18n from 'hooks/useI18n';\nimport useBlock from 'hooks/useBlock';\nimport { getBalanceNumber } from 'utils/formatBalance';\nimport { useFarms, usePriceBnbBusd, usePools } from 'state/hooks';\nimport { QuoteToken } from 'config/constants/types';\nimport FlexLayout from 'components/layout/Flex';\nimport Page from 'components/layout/Page';\nimport PoolCard from './components/PoolCard';\nimport PoolTabButtons from './components/PoolTabButtons';\nimport Divider from './components/Divider';\nimport Coming from './components/Coming';\n\nvar Farm = function Farm() {\n  _s();\n\n  var _useRouteMatch = useRouteMatch(),\n      path = _useRouteMatch.path;\n\n  var TranslateString = useI18n();\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account;\n\n  var farms = useFarms();\n  var pools = usePools(account);\n  var bnbPriceUSD = usePriceBnbBusd();\n  var block = useBlock();\n\n  var priceToBnb = function priceToBnb(tokenName, tokenPrice, quoteToken) {\n    var tokenPriceBN = new BigNumber(tokenPrice);\n\n    if (tokenName === 'BNB' || tokenName === 'WBNB') {\n      return new BigNumber(1);\n    }\n\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\n      return tokenPriceBN.div(bnbPriceUSD);\n    }\n\n    return tokenPriceBN;\n  };\n\n  var poolsWithApy = pools.map(function (pool) {\n    var rewardTokenFarm = farms.find(function (f) {\n      return f.tokenSymbol === pool.tokenName;\n    });\n    var stakingTokenFarm = farms.find(function (s) {\n      return s.tokenSymbol === pool.stakingTokenName;\n    }); // /!\\ Assume that the farm quote price is BNB\n\n    var stakingTokenPriceInBNB = priceToBnb(QuoteToken.HONEST, stakingTokenFarm === null || stakingTokenFarm === void 0 ? void 0 : stakingTokenFarm.tokenPriceVsQuote, stakingTokenFarm === null || stakingTokenFarm === void 0 ? void 0 : stakingTokenFarm.quoteTokenSymbol);\n    var rewardTokenPriceInBNB = priceToBnb(pool.tokenName, rewardTokenFarm === null || rewardTokenFarm === void 0 ? void 0 : rewardTokenFarm.tokenPriceVsQuote, rewardTokenFarm === null || rewardTokenFarm === void 0 ? void 0 : rewardTokenFarm.quoteTokenSymbol); // console.log('pool.tokenName', pool.tokenName)\n    // console.log('rewardTokenPriceInBNB', rewardTokenPriceInBNB.toString())\n    // console.log('stakingTokenPriceInBNB', stakingTokenPriceInBNB.toString())\n\n    var totalRewardPricePerYear = rewardTokenPriceInBNB.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR);\n    var totalStakingTokenInPool = new BigNumber(0);\n    totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked)); // tokens per block * price of CAKE * blocks_per_year / ( tokens in pool x salt price) * 100\n\n    var apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100);\n    return _objectSpread(_objectSpread({}, pool), {}, {\n      isFinished: pool.isFinished || block > pool.endBlock,\n      apy: apy\n    });\n  });\n\n  var _partition = partition(poolsWithApy, function (pool) {\n    return pool.isFinished;\n  }),\n      _partition2 = _slicedToArray(_partition, 2),\n      finishedPools = _partition2[0],\n      openPools = _partition2[1];\n\n  return /*#__PURE__*/_jsxDEV(Page, {\n    children: [/*#__PURE__*/_jsxDEV(Hero, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Heading, {\n          as: \"h1\",\n          size: \"xxl\",\n          mb: \"16px\",\n          children: \"Jungle Pools\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 84,\n          columnNumber: 11\n        }, _this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: [/*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Stake honest to earn new tokens\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 88,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"You can unstake at any time.\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 89,\n            columnNumber: 13\n          }, _this), /*#__PURE__*/_jsxDEV(\"li\", {\n            children: \"Rewards are calculated per block\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 11\n        }, _this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(\"img\", {\n        src: \"/images/syrup.png\",\n        alt: \"SYRUP POOL icon\",\n        width: 410,\n        height: 191\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(PoolTabButtons, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 95,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, _this), /*#__PURE__*/_jsxDEV(FlexLayout, {\n      children: [/*#__PURE__*/_jsxDEV(Route, {\n        exact: true,\n        path: \"\".concat(path),\n        children: /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [orderBy(openPools, ['sortOrder']).map(function (pool) {\n            return /*#__PURE__*/_jsxDEV(PoolCard, {\n              pool: pool\n            }, pool.sousId, false, {\n              fileName: _jsxFileName,\n              lineNumber: 101,\n              columnNumber: 15\n            }, _this);\n          }), /*#__PURE__*/_jsxDEV(Coming, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 103,\n            columnNumber: 13\n          }, _this)]\n        }, void 0, true)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, _this), /*#__PURE__*/_jsxDEV(Route, {\n        path: \"\".concat(path, \"/history\"),\n        children: orderBy(finishedPools, ['sortOrder']).map(function (pool) {\n          return /*#__PURE__*/_jsxDEV(PoolCard, {\n            pool: pool\n          }, pool.sousId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 13\n          }, _this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 9\n      }, _this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 7\n    }, _this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 81,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(Farm, \"F3SGgCXshECae7B63xHze5yMSvs=\", false, function () {\n  return [useRouteMatch, useI18n, useWallet, useFarms, usePools, usePriceBnbBusd, useBlock];\n});\n\n_c = Farm;\nvar Hero = styled.div(_templateObject(), function (_ref) {\n  var theme = _ref.theme;\n  return theme.colors.primary;\n});\n_c2 = Hero;\nexport default Farm;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"Farm\");\n$RefreshReg$(_c2, \"Hero\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/views/Pools/Syrup.tsx"],"names":["React","Route","useRouteMatch","BigNumber","styled","useWallet","Heading","BLOCKS_PER_YEAR","orderBy","partition","useI18n","useBlock","getBalanceNumber","useFarms","usePriceBnbBusd","usePools","QuoteToken","FlexLayout","Page","PoolCard","PoolTabButtons","Divider","Coming","Farm","path","TranslateString","account","farms","pools","bnbPriceUSD","block","priceToBnb","tokenName","tokenPrice","quoteToken","tokenPriceBN","BUSD","div","poolsWithApy","map","pool","rewardTokenFarm","find","f","tokenSymbol","stakingTokenFarm","s","stakingTokenName","stakingTokenPriceInBNB","HONEST","tokenPriceVsQuote","quoteTokenSymbol","rewardTokenPriceInBNB","totalRewardPricePerYear","times","tokenPerBlock","totalStakingTokenInPool","totalStaked","apy","isFinished","endBlock","finishedPools","openPools","sousId","Hero","theme","colors","primary"],"mappings":"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","sourcesContent":["import React from 'react'\nimport { Route, useRouteMatch } from 'react-router-dom'\nimport BigNumber from 'bignumber.js'\nimport styled from 'styled-components'\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\nimport { Heading } from '@pancakeswap-libs/uikit'\nimport { BLOCKS_PER_YEAR } from 'config'\nimport orderBy from 'lodash/orderBy'\nimport partition from 'lodash/partition'\nimport useI18n from 'hooks/useI18n'\nimport useBlock from 'hooks/useBlock'\nimport { getBalanceNumber } from 'utils/formatBalance'\nimport {\n  useFarms,\n  usePriceBnbBusd,\n  usePools,\n} from 'state/hooks'\nimport { QuoteToken } from 'config/constants/types'\nimport FlexLayout from 'components/layout/Flex'\nimport Page from 'components/layout/Page'\nimport PoolCard from './components/PoolCard'\nimport PoolTabButtons from './components/PoolTabButtons'\nimport Divider from './components/Divider'\nimport Coming from './components/Coming'\n\nconst Farm: React.FC = () => {\n  const { path } = useRouteMatch()\n  const TranslateString = useI18n()\n  const { account } = useWallet()\n  const farms = useFarms()\n  const pools = usePools(account)\n  const bnbPriceUSD = usePriceBnbBusd()\n  const block = useBlock()\n\n  const priceToBnb = (tokenName: string, tokenPrice: BigNumber, quoteToken: QuoteToken): BigNumber => {\n    const tokenPriceBN = new BigNumber(tokenPrice)\n    if (tokenName === 'BNB' || tokenName === 'WBNB') {\n      return new BigNumber(1)\n    }\n    if (tokenPrice && quoteToken === QuoteToken.BUSD) {\n      return tokenPriceBN.div(bnbPriceUSD)\n    }\n    return tokenPriceBN\n  }\n\n  const poolsWithApy = pools.map((pool) => {\n    const rewardTokenFarm = farms.find((f) => f.tokenSymbol === pool.tokenName)\n    const stakingTokenFarm = farms.find((s) => s.tokenSymbol === pool.stakingTokenName)\n\n    // /!\\ Assume that the farm quote price is BNB\n    const stakingTokenPriceInBNB = priceToBnb(\n      QuoteToken.HONEST,\n      stakingTokenFarm?.tokenPriceVsQuote,\n      stakingTokenFarm?.quoteTokenSymbol,\n    )\n    const rewardTokenPriceInBNB = priceToBnb(\n      pool.tokenName,\n      rewardTokenFarm?.tokenPriceVsQuote,\n      rewardTokenFarm?.quoteTokenSymbol,\n    )\n    // console.log('pool.tokenName', pool.tokenName)\n    // console.log('rewardTokenPriceInBNB', rewardTokenPriceInBNB.toString())\n    // console.log('stakingTokenPriceInBNB', stakingTokenPriceInBNB.toString())\n    const totalRewardPricePerYear = rewardTokenPriceInBNB.times(pool.tokenPerBlock).times(BLOCKS_PER_YEAR)\n    let totalStakingTokenInPool = new BigNumber(0)\n    totalStakingTokenInPool = stakingTokenPriceInBNB.times(getBalanceNumber(pool.totalStaked))\n\n    // tokens per block * price of CAKE * blocks_per_year / ( tokens in pool x salt price) * 100\n    const apy = totalRewardPricePerYear.div(totalStakingTokenInPool).times(100)\n\n    return {\n      ...pool,\n      isFinished: pool.isFinished || block > pool.endBlock,\n      apy,\n    }\n  })\n\n  const [finishedPools, openPools] = partition(poolsWithApy, (pool) => pool.isFinished)\n\n  return (\n    <Page>\n      <Hero>\n        <div>\n          <Heading as=\"h1\" size=\"xxl\" mb=\"16px\">\n            Jungle Pools\n          </Heading>\n          <ul>\n            <li>Stake honest to earn new tokens</li>\n            <li>You can unstake at any time.</li>\n            <li>Rewards are calculated per block</li>\n          </ul>\n        </div>\n        <img src=\"/images/syrup.png\" alt=\"SYRUP POOL icon\" width={410} height={191} />\n      </Hero>\n      <PoolTabButtons />\n      <Divider />\n      <FlexLayout>\n        <Route exact path={`${path}`}>\n          <>\n            {orderBy(openPools, ['sortOrder']).map((pool) => (\n              <PoolCard key={pool.sousId} pool={pool} />\n            ))}\n            <Coming />\n          </>\n        </Route>\n        <Route path={`${path}/history`}>\n          {orderBy(finishedPools, ['sortOrder']).map((pool) => (\n            <PoolCard key={pool.sousId} pool={pool} />\n          ))}\n        </Route>\n      </FlexLayout>\n    </Page>\n  )\n}\n\nconst Hero = styled.div`\n  align-items: center;\n  color: ${({ theme }) => theme.colors.primary};\n  display: grid;\n  grid-gap: 32px;\n  grid-template-columns: 1fr;\n  margin-left: auto;\n  margin-right: auto;\n  max-width: 250px;\n  ul {\n    margin: 0;\n    padding: 0;\n    list-style-type: none;\n    font-size: 16px;\n    li {\n      margin-bottom: 4px;\n    }\n  }\n  img {\n    height: auto;\n    max-width: 100%;\n  }\n  @media (min-width: 576px) {\n    grid-template-columns: 1fr 1fr;\n    margin: 0;\n    max-width: none;\n  }\n`\n\nexport default Farm\n"]},"metadata":{},"sourceType":"module"}