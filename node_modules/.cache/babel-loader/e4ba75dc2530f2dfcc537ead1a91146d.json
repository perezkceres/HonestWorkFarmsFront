{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport BigNumber from 'bignumber.js';\nimport erc20ABI from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport farmsConfig from 'config/constants/farms';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nvar CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\nexport var fetchFarmUserAllowances = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(account) {\n    var masterChefAdress, calls, rawLpAllowances, parsedLpAllowances;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            masterChefAdress = getMasterChefAddress();\n            calls = farmsConfig.map(function (farm) {\n              var lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n              return {\n                address: lpContractAddress,\n                name: 'allowance',\n                params: [account, masterChefAdress]\n              };\n            });\n            _context.next = 4;\n            return multicall(erc20ABI, calls);\n\n          case 4:\n            rawLpAllowances = _context.sent;\n            parsedLpAllowances = rawLpAllowances.map(function (lpBalance) {\n              return new BigNumber(lpBalance).toJSON();\n            });\n            return _context.abrupt(\"return\", parsedLpAllowances);\n\n          case 7:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchFarmUserAllowances(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchFarmUserTokenBalances = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account) {\n    var calls, rawTokenBalances, parsedTokenBalances;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            calls = farmsConfig.map(function (farm) {\n              var lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID];\n              return {\n                address: lpContractAddress,\n                name: 'balanceOf',\n                params: [account]\n              };\n            });\n            _context2.next = 3;\n            return multicall(erc20ABI, calls);\n\n          case 3:\n            rawTokenBalances = _context2.sent;\n            parsedTokenBalances = rawTokenBalances.map(function (tokenBalance) {\n              return new BigNumber(tokenBalance).toJSON();\n            });\n            return _context2.abrupt(\"return\", parsedTokenBalances);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchFarmUserTokenBalances(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchFarmUserStakedBalances = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account) {\n    var masterChefAdress, calls, rawStakedBalances, parsedStakedBalances;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            masterChefAdress = getMasterChefAddress();\n            calls = farmsConfig.map(function (farm) {\n              return {\n                address: masterChefAdress,\n                name: 'userInfo',\n                params: [farm.pid, account]\n              };\n            });\n            _context3.next = 4;\n            return multicall(masterchefABI, calls);\n\n          case 4:\n            rawStakedBalances = _context3.sent;\n            parsedStakedBalances = rawStakedBalances.map(function (stakedBalance) {\n              return new BigNumber(stakedBalance[0]._hex).toJSON();\n            });\n            return _context3.abrupt(\"return\", parsedStakedBalances);\n\n          case 7:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function fetchFarmUserStakedBalances(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var fetchFarmUserEarnings = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account) {\n    var masterChefAdress, calls, rawEarnings, parsedEarnings;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            masterChefAdress = getMasterChefAddress();\n            calls = farmsConfig.map(function (farm) {\n              return {\n                address: masterChefAdress,\n                name: 'pendinghonest',\n                params: [farm.pid, account]\n              };\n            });\n            _context4.next = 4;\n            return multicall(masterchefABI, calls);\n\n          case 4:\n            rawEarnings = _context4.sent;\n            parsedEarnings = rawEarnings.map(function (earnings) {\n              return new BigNumber(earnings).toJSON();\n            });\n            return _context4.abrupt(\"return\", parsedEarnings);\n\n          case 7:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function fetchFarmUserEarnings(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/state/farms/fetchFarmUser.ts"],"names":["BigNumber","erc20ABI","masterchefABI","multicall","farmsConfig","getMasterChefAddress","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarmUserAllowances","account","masterChefAdress","calls","map","farm","lpContractAddress","isTokenOnly","tokenAddresses","lpAddresses","address","name","params","rawLpAllowances","parsedLpAllowances","lpBalance","toJSON","fetchFarmUserTokenBalances","rawTokenBalances","parsedTokenBalances","tokenBalance","fetchFarmUserStakedBalances","pid","rawStakedBalances","parsedStakedBalances","stakedBalance","_hex","fetchFarmUserEarnings","rawEarnings","parsedEarnings","earnings"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchFarmUserAllowances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return { address: lpContractAddress, name: 'allowance', params: [account, masterChefAdress] }\r\n  })\r\n\r\n  const rawLpAllowances = await multicall(erc20ABI, calls)\r\n  const parsedLpAllowances = rawLpAllowances.map((lpBalance) => {\r\n    return new BigNumber(lpBalance).toJSON()\r\n  })\r\n  return parsedLpAllowances\r\n}\r\n\r\nexport const fetchFarmUserTokenBalances = async (account: string) => {\r\n  const calls = farmsConfig.map((farm) => {\r\n    const lpContractAddress = farm.isTokenOnly ? farm.tokenAddresses[CHAIN_ID] : farm.lpAddresses[CHAIN_ID]\r\n    return {\r\n      address: lpContractAddress,\r\n      name: 'balanceOf',\r\n      params: [account],\r\n    }\r\n  })\r\n\r\n  const rawTokenBalances = await multicall(erc20ABI, calls)\r\n  const parsedTokenBalances = rawTokenBalances.map((tokenBalance) => {\r\n    return new BigNumber(tokenBalance).toJSON()\r\n  })\r\n  return parsedTokenBalances\r\n}\r\n\r\nexport const fetchFarmUserStakedBalances = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'userInfo',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawStakedBalances = await multicall(masterchefABI, calls)\r\n  const parsedStakedBalances = rawStakedBalances.map((stakedBalance) => {\r\n    return new BigNumber(stakedBalance[0]._hex).toJSON()\r\n  })\r\n  return parsedStakedBalances\r\n}\r\n\r\nexport const fetchFarmUserEarnings = async (account: string) => {\r\n  const masterChefAdress = getMasterChefAddress()\r\n\r\n  const calls = farmsConfig.map((farm) => {\r\n    return {\r\n      address: masterChefAdress,\r\n      name: 'pendinghonest',\r\n      params: [farm.pid, account],\r\n    }\r\n  })\r\n\r\n  const rawEarnings = await multicall(masterchefABI, calls)\r\n  const parsedEarnings = rawEarnings.map((earnings) => {\r\n    return new BigNumber(earnings).toJSON()\r\n  })\r\n  return parsedEarnings\r\n}\r\n"]},"metadata":{},"sourceType":"module"}