{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _slicedToArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport BigNumber from 'bignumber.js';\nimport erc20 from 'config/abi/erc20.json';\nimport masterchefABI from 'config/abi/masterchef.json';\nimport multicall from 'utils/multicall';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nimport farmsConfig from 'config/constants/farms';\nimport { QuoteToken } from '../../config/constants/types';\nvar CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\n\nvar fetchFarms = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return Promise.all(farmsConfig.map( /*#__PURE__*/function () {\n              var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(farmConfig) {\n                var lpAdress, calls, _yield$multicall, _yield$multicall2, tokenBalanceLP, quoteTokenBlanceLP, lpTokenBalanceMC, lpTotalSupply, tokenDecimals, quoteTokenDecimals, tokenAmount, lpTotalInQuoteToken, tokenPriceVsQuote, lpTokenRatio, quoteTokenAmount, _yield$multicall3, _yield$multicall4, info, totalAllocPoint, honestPerBlock, allocPoint, poolWeight;\n\n                return _regeneratorRuntime.wrap(function _callee$(_context) {\n                  while (1) {\n                    switch (_context.prev = _context.next) {\n                      case 0:\n                        lpAdress = farmConfig.lpAddresses[CHAIN_ID];\n                        calls = [// Balance of token in the LP contract\n                        {\n                          address: farmConfig.tokenAddresses[CHAIN_ID],\n                          name: 'balanceOf',\n                          params: [lpAdress]\n                        }, // Balance of quote token on LP contract\n                        {\n                          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n                          name: 'balanceOf',\n                          params: [lpAdress]\n                        }, // Balance of LP tokens in the master chef contract\n                        {\n                          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\n                          name: 'balanceOf',\n                          params: [getMasterChefAddress()]\n                        }, // Total supply of LP tokens\n                        {\n                          address: lpAdress,\n                          name: 'totalSupply'\n                        }, // Token decimals\n                        {\n                          address: farmConfig.tokenAddresses[CHAIN_ID],\n                          name: 'decimals'\n                        }, // Quote token decimals\n                        {\n                          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\n                          name: 'decimals'\n                        }];\n                        _context.next = 4;\n                        return multicall(erc20, calls);\n\n                      case 4:\n                        _yield$multicall = _context.sent;\n                        _yield$multicall2 = _slicedToArray(_yield$multicall, 6);\n                        tokenBalanceLP = _yield$multicall2[0];\n                        quoteTokenBlanceLP = _yield$multicall2[1];\n                        lpTokenBalanceMC = _yield$multicall2[2];\n                        lpTotalSupply = _yield$multicall2[3];\n                        tokenDecimals = _yield$multicall2[4];\n                        quoteTokenDecimals = _yield$multicall2[5];\n\n                        if (farmConfig.isTokenOnly) {\n                          //     console.log('here2',\n                          //   tokenDecimals,farmConfig\n                          // )\n                          tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(6));\n\n                          if (farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD) {\n                            tokenPriceVsQuote = new BigNumber(1);\n                          } else {\n                            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n                          }\n\n                          lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\n                        } else {\n                          // Ratio in % a LP tokens that are in staking, vs the total number in circulation\n                          lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply)); // Total value in staking in quote token value\n\n                          lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(6)).times(new BigNumber(2)).times(lpTokenRatio); // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\n\n                          tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio);\n                          quoteTokenAmount = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(10).pow(quoteTokenDecimals)).times(lpTokenRatio);\n\n                          if (tokenAmount.comparedTo(0) > 0) {\n                            tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\n                          } else {\n                            tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\n                          }\n                        }\n\n                        _context.next = 15;\n                        return multicall(masterchefABI, [{\n                          address: getMasterChefAddress(),\n                          name: 'poolInfo',\n                          params: [farmConfig.pid]\n                        }, {\n                          address: getMasterChefAddress(),\n                          name: 'totalAllocPoint'\n                        }, {\n                          address: getMasterChefAddress(),\n                          name: 'honestPerBlock'\n                        }]);\n\n                      case 15:\n                        _yield$multicall3 = _context.sent;\n                        _yield$multicall4 = _slicedToArray(_yield$multicall3, 3);\n                        info = _yield$multicall4[0];\n                        totalAllocPoint = _yield$multicall4[1];\n                        honestPerBlock = _yield$multicall4[2];\n                        allocPoint = new BigNumber(info.allocPoint._hex);\n                        poolWeight = allocPoint.div(new BigNumber(totalAllocPoint));\n                        return _context.abrupt(\"return\", _objectSpread(_objectSpread({}, farmConfig), {}, {\n                          tokenAmount: tokenAmount.toJSON(),\n                          // quoteTokenAmount: quoteTokenAmount,\n                          lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\n                          tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\n                          poolWeight: poolWeight.toNumber(),\n                          multiplier: \"\".concat(allocPoint.div(100).toString(), \"X\"),\n                          depositFeeBP: info.depositFeeBP,\n                          honestPerBlock: new BigNumber(honestPerBlock).toNumber()\n                        }));\n\n                      case 23:\n                      case \"end\":\n                        return _context.stop();\n                    }\n                  }\n                }, _callee);\n              }));\n\n              return function (_x) {\n                return _ref2.apply(this, arguments);\n              };\n            }()));\n\n          case 2:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchFarms() {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default fetchFarms;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/state/farms/fetchFarms.ts"],"names":["BigNumber","erc20","masterchefABI","multicall","getMasterChefAddress","farmsConfig","QuoteToken","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchFarms","Promise","all","map","farmConfig","lpAdress","lpAddresses","calls","address","tokenAddresses","name","params","quoteTokenAdresses","isTokenOnly","tokenBalanceLP","quoteTokenBlanceLP","lpTokenBalanceMC","lpTotalSupply","tokenDecimals","quoteTokenDecimals","tokenAmount","div","pow","tokenSymbol","BUSD","quoteTokenSymbol","tokenPriceVsQuote","lpTotalInQuoteToken","times","lpTokenRatio","quoteTokenAmount","comparedTo","pid","info","totalAllocPoint","honestPerBlock","allocPoint","_hex","poolWeight","toJSON","toNumber","multiplier","toString","depositFeeBP","data"],"mappings":"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","sourcesContent":["import BigNumber from 'bignumber.js'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport masterchefABI from 'config/abi/masterchef.json'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport { QuoteToken } from '../../config/constants/types'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nconst fetchFarms = async () => {\r\n  const data = await Promise.all(\r\n    farmsConfig.map(async (farmConfig) => {\r\n      const lpAdress = farmConfig.lpAddresses[CHAIN_ID]\r\n      const calls = [\r\n        // Balance of token in the LP contract\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of quote token on LP contract\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'balanceOf',\r\n          params: [lpAdress],\r\n        },\r\n        // Balance of LP tokens in the master chef contract\r\n        {\r\n          address: farmConfig.isTokenOnly ? farmConfig.tokenAddresses[CHAIN_ID] : lpAdress,\r\n          name: 'balanceOf',\r\n          params: [getMasterChefAddress()],\r\n        },\r\n        // Total supply of LP tokens\r\n        {\r\n          address: lpAdress,\r\n          name: 'totalSupply',\r\n        },\r\n        // Token decimals\r\n        {\r\n          address: farmConfig.tokenAddresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n        // Quote token decimals\r\n        {\r\n          address: farmConfig.quoteTokenAdresses[CHAIN_ID],\r\n          name: 'decimals',\r\n        },\r\n      ]\r\n\r\n      const [\r\n        tokenBalanceLP,\r\n        quoteTokenBlanceLP,\r\n        lpTokenBalanceMC,\r\n        lpTotalSupply,\r\n        tokenDecimals,\r\n        quoteTokenDecimals\r\n      ] = await multicall(erc20, calls)\r\n\r\n    \r\n\r\n      let tokenAmount;\r\n      let lpTotalInQuoteToken;\r\n      let tokenPriceVsQuote;\r\n      if (farmConfig.isTokenOnly) {\r\n      //     console.log('here2',\r\n      //   tokenDecimals,farmConfig\r\n      // )\r\n        tokenAmount = new BigNumber(lpTokenBalanceMC).div(new BigNumber(10).pow(6));\r\n        if(farmConfig.tokenSymbol === QuoteToken.BUSD && farmConfig.quoteTokenSymbol === QuoteToken.BUSD){\r\n          tokenPriceVsQuote = new BigNumber(1);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n        lpTotalInQuoteToken = tokenAmount.times(tokenPriceVsQuote);\r\n      }else{\r\n        // Ratio in % a LP tokens that are in staking, vs the total number in circulation\r\n        const lpTokenRatio = new BigNumber(lpTokenBalanceMC).div(new BigNumber(lpTotalSupply))\r\n\r\n        // Total value in staking in quote token value\r\n        lpTotalInQuoteToken = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(6))\r\n          .times(new BigNumber(2))\r\n          .times(lpTokenRatio)\r\n\r\n        // Amount of token in the LP that are considered staking (i.e amount of token * lp ratio)\r\n        tokenAmount = new BigNumber(tokenBalanceLP).div(new BigNumber(10).pow(tokenDecimals)).times(lpTokenRatio)\r\n        const quoteTokenAmount = new BigNumber(quoteTokenBlanceLP)\r\n          .div(new BigNumber(10).pow(quoteTokenDecimals))\r\n          .times(lpTokenRatio)\r\n\r\n        if(tokenAmount.comparedTo(0) > 0){\r\n          tokenPriceVsQuote = quoteTokenAmount.div(tokenAmount);\r\n        }else{\r\n          tokenPriceVsQuote = new BigNumber(quoteTokenBlanceLP).div(new BigNumber(tokenBalanceLP));\r\n        }\r\n      }\r\n\r\n      const [info, totalAllocPoint, honestPerBlock] = await multicall(masterchefABI, [\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'poolInfo',\r\n          params: [farmConfig.pid],\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'totalAllocPoint',\r\n        },\r\n        {\r\n          address: getMasterChefAddress(),\r\n          name: 'honestPerBlock',\r\n        },\r\n      ])\r\n\r\n      const allocPoint = new BigNumber(info.allocPoint._hex)\r\n      const poolWeight = allocPoint.div(new BigNumber(totalAllocPoint))\r\n\r\n      return {\r\n        ...farmConfig,\r\n        tokenAmount: tokenAmount.toJSON(),\r\n        // quoteTokenAmount: quoteTokenAmount,\r\n        lpTotalInQuoteToken: lpTotalInQuoteToken.toJSON(),\r\n        tokenPriceVsQuote: tokenPriceVsQuote.toJSON(),\r\n        poolWeight: poolWeight.toNumber(),\r\n        multiplier: `${allocPoint.div(100).toString()}X`,\r\n        depositFeeBP: info.depositFeeBP,\r\n        honestPerBlock: new BigNumber(honestPerBlock).toNumber(),\r\n      }\r\n    }),\r\n  )\r\n  return data\r\n}\r\n\r\nexport default fetchFarms\r\n"]},"metadata":{},"sourceType":"module"}