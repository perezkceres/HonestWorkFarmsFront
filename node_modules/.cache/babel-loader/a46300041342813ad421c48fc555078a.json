{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _defineProperty from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport pools from 'config/constants/pools';\nimport erc20ABI from 'config/abi/erc20.json';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport { QuoteToken } from 'config/constants/types';\nimport multicall from 'utils/multicall';\nimport { getWeb3 } from 'utils/web3';\nimport BigNumber from 'bignumber.js';\nvar CHAIN_ID = process.env.REACT_APP_CHAIN_ID; // Pool 0, Cake / Cake is a different kind of contract (master chef)\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\n\nvar nonBnbPools = pools.filter(function (p) {\n  return p.stakingTokenName !== QuoteToken.BNB;\n});\nvar bnbPools = pools.filter(function (p) {\n  return p.stakingTokenName === QuoteToken.BNB;\n});\nvar web3 = getWeb3();\nexport var fetchPoolsAllowance = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(account) {\n    var calls, allowances;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            calls = nonBnbPools.map(function (p) {\n              return {\n                address: p.stakingTokenAddress[CHAIN_ID],\n                name: 'allowance',\n                params: [account, p.contractAddress[CHAIN_ID]]\n              };\n            });\n            _context.next = 3;\n            return multicall(erc20ABI, calls);\n\n          case 3:\n            allowances = _context.sent;\n            return _context.abrupt(\"return\", nonBnbPools.reduce(function (acc, pool, index) {\n              return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, pool.sousId, new BigNumber(allowances[index]).toJSON()));\n            }, {}));\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchPoolsAllowance(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchUserBalances = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(account) {\n    var calls, tokenBalancesRaw, tokenBalances, bnbBalance, bnbBalances;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            // Non BNB pools\n            calls = nonBnbPools.map(function (p) {\n              return {\n                address: p.stakingTokenAddress[CHAIN_ID],\n                name: 'balanceOf',\n                params: [account]\n              };\n            });\n            _context2.next = 3;\n            return multicall(erc20ABI, calls);\n\n          case 3:\n            tokenBalancesRaw = _context2.sent;\n            tokenBalances = nonBnbPools.reduce(function (acc, pool, index) {\n              return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, pool.sousId, new BigNumber(tokenBalancesRaw[index]).toJSON()));\n            }, {}); // BNB pools\n\n            _context2.next = 7;\n            return web3.eth.getBalance(account);\n\n          case 7:\n            bnbBalance = _context2.sent;\n            bnbBalances = bnbPools.reduce(function (acc, pool) {\n              return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, pool.sousId, new BigNumber(bnbBalance).toJSON()));\n            }, {});\n            return _context2.abrupt(\"return\", _objectSpread(_objectSpread({}, tokenBalances), bnbBalances));\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchUserBalances(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var fetchUserStakeBalances = /*#__PURE__*/function () {\n  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(account) {\n    var cakePools, cakeUserInfo;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            cakePools = pools;\n            _context3.next = 3;\n            return multicall(sousChefABI, cakePools.map(function (p) {\n              return {\n                address: p.contractAddress[CHAIN_ID],\n                name: 'userInfo',\n                params: [account]\n              };\n            }));\n\n          case 3:\n            cakeUserInfo = _context3.sent;\n            return _context3.abrupt(\"return\", _objectSpread({}, pools.reduce(function (acc, pool, index) {\n              var _cakeUserInfo$index;\n\n              return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, pool.sousId, new BigNumber((_cakeUserInfo$index = cakeUserInfo[index]) === null || _cakeUserInfo$index === void 0 ? void 0 : _cakeUserInfo$index.amount._hex).toJSON()));\n            }, {})));\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n\n  return function fetchUserStakeBalances(_x3) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var fetchUserPendingRewards = /*#__PURE__*/function () {\n  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(account) {\n    var cakePools, res;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            cakePools = pools;\n            _context4.next = 3;\n            return multicall(sousChefABI, cakePools.map(function (p) {\n              return {\n                address: p.contractAddress[CHAIN_ID],\n                name: 'pendingReward',\n                params: [account]\n              };\n            }));\n\n          case 3:\n            res = _context4.sent;\n            return _context4.abrupt(\"return\", _objectSpread({}, pools.reduce(function (acc, pool, index) {\n              return _objectSpread(_objectSpread({}, acc), {}, _defineProperty({}, pool.sousId, new BigNumber(res[index]).toJSON()));\n            }, {})));\n\n          case 5:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4);\n  }));\n\n  return function fetchUserPendingRewards(_x4) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/state/pools/fetchPoolsUser.ts"],"names":["pools","erc20ABI","sousChefABI","QuoteToken","multicall","getWeb3","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","nonBnbPools","filter","p","stakingTokenName","BNB","bnbPools","web3","fetchPoolsAllowance","account","calls","map","address","stakingTokenAddress","name","params","contractAddress","allowances","reduce","acc","pool","index","sousId","toJSON","fetchUserBalances","tokenBalancesRaw","tokenBalances","eth","getBalance","bnbBalance","bnbBalances","fetchUserStakeBalances","cakePools","cakeUserInfo","amount","_hex","fetchUserPendingRewards","res"],"mappings":";;;;AAAA,OAAOA,KAAP,MAAkB,wBAAlB;AACA,OAAOC,QAAP,MAAqB,uBAArB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,IAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B,C,CAEA;AACA;;AACA,IAAMC,WAAW,GAAGX,KAAK,CAACY,MAAN,CAAa,UAACC,CAAD;AAAA,SAAOA,CAAC,CAACC,gBAAF,KAAuBX,UAAU,CAACY,GAAzC;AAAA,CAAb,CAApB;AACA,IAAMC,QAAQ,GAAGhB,KAAK,CAACY,MAAN,CAAa,UAACC,CAAD;AAAA,SAAOA,CAAC,CAACC,gBAAF,KAAuBX,UAAU,CAACY,GAAzC;AAAA,CAAb,CAAjB;AACA,IAAME,IAAI,GAAGZ,OAAO,EAApB;AAEA,OAAO,IAAMa,mBAAmB;AAAA,sEAAG,iBAAOC,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,YAAAA,KAD2B,GACnBT,WAAW,CAACU,GAAZ,CAAgB,UAACR,CAAD;AAAA,qBAAQ;AACpCS,gBAAAA,OAAO,EAAET,CAAC,CAACU,mBAAF,CAAsBhB,QAAtB,CAD2B;AAEpCiB,gBAAAA,IAAI,EAAE,WAF8B;AAGpCC,gBAAAA,MAAM,EAAE,CAACN,OAAD,EAAUN,CAAC,CAACa,eAAF,CAAkBnB,QAAlB,CAAV;AAH4B,eAAR;AAAA,aAAhB,CADmB;AAAA;AAAA,mBAORH,SAAS,CAACH,QAAD,EAAWmB,KAAX,CAPD;;AAAA;AAO3BO,YAAAA,UAP2B;AAAA,6CAQ1BhB,WAAW,CAACiB,MAAZ,CACL,UAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ;AAAA,qDAA4BF,GAA5B,2BAAkCC,IAAI,CAACE,MAAvC,EAAgD,IAAI1B,SAAJ,CAAcqB,UAAU,CAACI,KAAD,CAAxB,EAAiCE,MAAjC,EAAhD;AAAA,aADK,EAEL,EAFK,CAR0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAnBf,mBAAmB;AAAA;AAAA;AAAA,GAAzB;AAcP,OAAO,IAAMgB,iBAAiB;AAAA,uEAAG,kBAAOf,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/B;AACMC,YAAAA,KAFyB,GAEjBT,WAAW,CAACU,GAAZ,CAAgB,UAACR,CAAD;AAAA,qBAAQ;AACpCS,gBAAAA,OAAO,EAAET,CAAC,CAACU,mBAAF,CAAsBhB,QAAtB,CAD2B;AAEpCiB,gBAAAA,IAAI,EAAE,WAF8B;AAGpCC,gBAAAA,MAAM,EAAE,CAACN,OAAD;AAH4B,eAAR;AAAA,aAAhB,CAFiB;AAAA;AAAA,mBAOAf,SAAS,CAACH,QAAD,EAAWmB,KAAX,CAPT;;AAAA;AAOzBe,YAAAA,gBAPyB;AAQzBC,YAAAA,aARyB,GAQTzB,WAAW,CAACiB,MAAZ,CACpB,UAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ;AAAA,qDAA4BF,GAA5B,2BAAkCC,IAAI,CAACE,MAAvC,EAAgD,IAAI1B,SAAJ,CAAc6B,gBAAgB,CAACJ,KAAD,CAA9B,EAAuCE,MAAvC,EAAhD;AAAA,aADoB,EAEpB,EAFoB,CARS,EAa/B;;AAb+B;AAAA,mBAcNhB,IAAI,CAACoB,GAAL,CAASC,UAAT,CAAoBnB,OAApB,CAdM;;AAAA;AAczBoB,YAAAA,UAdyB;AAezBC,YAAAA,WAfyB,GAeXxB,QAAQ,CAACY,MAAT,CAClB,UAACC,GAAD,EAAMC,IAAN;AAAA,qDAAqBD,GAArB,2BAA2BC,IAAI,CAACE,MAAhC,EAAyC,IAAI1B,SAAJ,CAAciC,UAAd,EAA0BN,MAA1B,EAAzC;AAAA,aADkB,EAElB,EAFkB,CAfW;AAAA,8EAoBnBG,aApBmB,GAoBDI,WApBC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAjBN,iBAAiB;AAAA;AAAA;AAAA,GAAvB;AAuBP,OAAO,IAAMO,sBAAsB;AAAA,uEAAG,kBAAOtB,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9BuB,YAAAA,SAD8B,GAClB1C,KADkB;AAAA;AAAA,mBAETI,SAAS,CAClCF,WADkC,EAElCwC,SAAS,CAACrB,GAAV,CAAc,UAACR,CAAD;AAAA,qBAAQ;AACpBS,gBAAAA,OAAO,EAAET,CAAC,CAACa,eAAF,CAAkBnB,QAAlB,CADW;AAEpBiB,gBAAAA,IAAI,EAAE,UAFc;AAGpBC,gBAAAA,MAAM,EAAE,CAACN,OAAD;AAHY,eAAR;AAAA,aAAd,CAFkC,CAFA;;AAAA;AAE9BwB,YAAAA,YAF8B;AAAA,gEAY/B3C,KAAK,CAAC4B,MAAN,CACD,UAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ;AAAA;;AAAA,qDACKF,GADL,2BAEGC,IAAI,CAACE,MAFR,EAEiB,IAAI1B,SAAJ,wBAAcqC,YAAY,CAACZ,KAAD,CAA1B,wDAAc,oBAAqBa,MAArB,CAA4BC,IAA1C,EAAgDZ,MAAhD,EAFjB;AAAA,aADC,EAKD,EALC,CAZ+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBQ,sBAAsB;AAAA;AAAA;AAAA,GAA5B;AAsBP,OAAO,IAAMK,uBAAuB;AAAA,uEAAG,kBAAO3B,OAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BuB,YAAAA,SAD+B,GACnB1C,KADmB;AAAA;AAAA,mBAEnBI,SAAS,CACzBF,WADyB,EAEzBwC,SAAS,CAACrB,GAAV,CAAc,UAACR,CAAD;AAAA,qBAAQ;AACpBS,gBAAAA,OAAO,EAAET,CAAC,CAACa,eAAF,CAAkBnB,QAAlB,CADW;AAEpBiB,gBAAAA,IAAI,EAAE,eAFc;AAGpBC,gBAAAA,MAAM,EAAE,CAACN,OAAD;AAHY,eAAR;AAAA,aAAd,CAFyB,CAFU;;AAAA;AAE/B4B,YAAAA,GAF+B;AAAA,gEAYhC/C,KAAK,CAAC4B,MAAN,CACD,UAACC,GAAD,EAAMC,IAAN,EAAYC,KAAZ;AAAA,qDACKF,GADL,2BAEGC,IAAI,CAACE,MAFR,EAEiB,IAAI1B,SAAJ,CAAcyC,GAAG,CAAChB,KAAD,CAAjB,EAA0BE,MAA1B,EAFjB;AAAA,aADC,EAKD,EALC,CAZgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAvBa,uBAAuB;AAAA;AAAA;AAAA,GAA7B","sourcesContent":["import pools from 'config/constants/pools'\r\nimport erc20ABI from 'config/abi/erc20.json'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport { QuoteToken } from 'config/constants/types'\r\nimport multicall from 'utils/multicall'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\n// Pool 0, Cake / Cake is a different kind of contract (master chef)\r\n// BNB pools use the native BNB token (wrapping ? unwrapping is done at the contract level)\r\nconst nonBnbPools = pools.filter((p) => p.stakingTokenName !== QuoteToken.BNB)\r\nconst bnbPools = pools.filter((p) => p.stakingTokenName === QuoteToken.BNB)\r\nconst web3 = getWeb3()\r\n\r\nexport const fetchPoolsAllowance = async (account) => {\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress[CHAIN_ID],\r\n    name: 'allowance',\r\n    params: [account, p.contractAddress[CHAIN_ID]],\r\n  }))\r\n\r\n  const allowances = await multicall(erc20ABI, calls)\r\n  return nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(allowances[index]).toJSON() }),\r\n    {},\r\n  )\r\n}\r\n\r\nexport const fetchUserBalances = async (account) => {\r\n  // Non BNB pools\r\n  const calls = nonBnbPools.map((p) => ({\r\n    address: p.stakingTokenAddress[CHAIN_ID],\r\n    name: 'balanceOf',\r\n    params: [account],\r\n  }))\r\n  const tokenBalancesRaw = await multicall(erc20ABI, calls)\r\n  const tokenBalances = nonBnbPools.reduce(\r\n    (acc, pool, index) => ({ ...acc, [pool.sousId]: new BigNumber(tokenBalancesRaw[index]).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  // BNB pools\r\n  const bnbBalance = await web3.eth.getBalance(account)\r\n  const bnbBalances = bnbPools.reduce(\r\n    (acc, pool) => ({ ...acc, [pool.sousId]: new BigNumber(bnbBalance).toJSON() }),\r\n    {},\r\n  )\r\n\r\n  return { ...tokenBalances, ...bnbBalances }\r\n}\r\n\r\nexport const fetchUserStakeBalances = async (account) => {\r\n  const cakePools = pools\r\n  const cakeUserInfo = await multicall(\r\n    sousChefABI,\r\n    cakePools.map((p) => ({\r\n      address: p.contractAddress[CHAIN_ID],\r\n      name: 'userInfo',\r\n      params: [account],\r\n    })),\r\n  )\r\n\r\n  return {\r\n    ...pools.reduce(\r\n      (acc, pool, index) => ({\r\n        ...acc,\r\n        [pool.sousId]: new BigNumber(cakeUserInfo[index]?.amount._hex).toJSON(),\r\n      }),\r\n      {},\r\n    ),\r\n  }\r\n}\r\n\r\nexport const fetchUserPendingRewards = async (account) => {\r\n  const cakePools = pools\r\n  const res = await multicall(\r\n    sousChefABI,\r\n    cakePools.map((p) => ({\r\n      address: p.contractAddress[CHAIN_ID],\r\n      name: 'pendingReward',\r\n      params: [account],\r\n    })),\r\n  )\r\n\r\n  return {\r\n    ...pools.reduce(\r\n      (acc, pool, index) => ({\r\n        ...acc,\r\n        [pool.sousId]: new BigNumber(res[index]).toJSON(),\r\n      }),\r\n      {},\r\n    ),\r\n  }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}