{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport poolsConfig from 'config/constants/pools';\nimport sousChefABI from 'config/abi/sousChef.json';\nimport cakeABI from 'config/abi/cake.json';\nimport multicall from 'utils/multicall';\nimport BigNumber from 'bignumber.js';\nvar CHAIN_ID = process.env.REACT_APP_CHAIN_ID;\nexport var fetchPoolsBlockLimits = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var cakePools, cakeStarts, cakeEnds;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            cakePools = poolsConfig;\n            _context.next = 3;\n            return multicall(sousChefABI, cakePools.map(function (cakePool) {\n              return {\n                address: cakePool.contractAddress[CHAIN_ID],\n                name: 'startBlock'\n              };\n            }));\n\n          case 3:\n            cakeStarts = _context.sent;\n            _context.next = 6;\n            return multicall(sousChefABI, cakePools.map(function (cakePool) {\n              return {\n                address: cakePool.contractAddress[CHAIN_ID],\n                name: 'bonusEndBlock'\n              };\n            }));\n\n          case 6:\n            cakeEnds = _context.sent;\n            return _context.abrupt(\"return\", _toConsumableArray(cakePools.map(function (poolConfig, index) {\n              var startBlock = cakeStarts[index];\n              var endBlock = cakeEnds[index];\n              return {\n                sousId: poolConfig.sousId,\n                startBlock: new BigNumber(startBlock).toJSON(),\n                endBlock: new BigNumber(endBlock).toJSON()\n              };\n            })));\n\n          case 8:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function fetchPoolsBlockLimits() {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var fetchPoolsTotalStaking = /*#__PURE__*/function () {\n  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var cakePools, cakePoolsTotalStaked;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            cakePools = poolsConfig;\n            _context2.next = 3;\n            return multicall(cakeABI, cakePools.map(function (cakePool) {\n              return {\n                address: cakePool.stakingTokenAddress[CHAIN_ID],\n                name: 'balanceOf',\n                params: [cakePool.contractAddress[CHAIN_ID]]\n              };\n            }));\n\n          case 3:\n            cakePoolsTotalStaked = _context2.sent;\n            return _context2.abrupt(\"return\", _toConsumableArray(cakePools.map(function (p, index) {\n              return {\n                sousId: p.sousId,\n                totalStaked: new BigNumber(cakePoolsTotalStaked[index]).toJSON()\n              };\n            })));\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n\n  return function fetchPoolsTotalStaking() {\n    return _ref2.apply(this, arguments);\n  };\n}();","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/state/pools/fetchPools.ts"],"names":["poolsConfig","sousChefABI","cakeABI","multicall","BigNumber","CHAIN_ID","process","env","REACT_APP_CHAIN_ID","fetchPoolsBlockLimits","cakePools","map","cakePool","address","contractAddress","name","cakeStarts","cakeEnds","poolConfig","index","startBlock","endBlock","sousId","toJSON","fetchPoolsTotalStaking","stakingTokenAddress","params","cakePoolsTotalStaked","p","totalStaked"],"mappings":";;;AAAA,OAAOA,WAAP,MAAwB,wBAAxB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,OAAOC,OAAP,MAAoB,sBAApB;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,OAAOC,SAAP,MAAsB,cAAtB;AAEA,IAAMC,QAAQ,GAAGC,OAAO,CAACC,GAAR,CAAYC,kBAA7B;AAEA,OAAO,IAAMC,qBAAqB;AAAA,sEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC7BC,YAAAA,SAD6B,GACjBV,WADiB;AAAA;AAAA,mBAEVG,SAAS,CAChCF,WADgC,EAEhCS,SAAS,CAACC,GAAV,CAAc,UAACC,QAAD;AAAA,qBAAe;AAC3BC,gBAAAA,OAAO,EAAED,QAAQ,CAACE,eAAT,CAAyBT,QAAzB,CADkB;AAE3BU,gBAAAA,IAAI,EAAE;AAFqB,eAAf;AAAA,aAAd,CAFgC,CAFC;;AAAA;AAE7BC,YAAAA,UAF6B;AAAA;AAAA,mBASZb,SAAS,CAC9BF,WAD8B,EAE9BS,SAAS,CAACC,GAAV,CAAc,UAACC,QAAD;AAAA,qBAAe;AAC3BC,gBAAAA,OAAO,EAAED,QAAQ,CAACE,eAAT,CAAyBT,QAAzB,CADkB;AAE3BU,gBAAAA,IAAI,EAAE;AAFqB,eAAf;AAAA,aAAd,CAF8B,CATG;;AAAA;AAS7BE,YAAAA,QAT6B;AAAA,gEAkB9BP,SAAS,CAACC,GAAV,CAAc,UAACO,UAAD,EAAaC,KAAb,EAAuB;AACtC,kBAAMC,UAAU,GAAGJ,UAAU,CAACG,KAAD,CAA7B;AACA,kBAAME,QAAQ,GAAGJ,QAAQ,CAACE,KAAD,CAAzB;AACA,qBAAO;AACLG,gBAAAA,MAAM,EAAEJ,UAAU,CAACI,MADd;AAELF,gBAAAA,UAAU,EAAE,IAAIhB,SAAJ,CAAcgB,UAAd,EAA0BG,MAA1B,EAFP;AAGLF,gBAAAA,QAAQ,EAAE,IAAIjB,SAAJ,CAAciB,QAAd,EAAwBE,MAAxB;AAHL,eAAP;AAKD,aARE,CAlB8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAArBd,qBAAqB;AAAA;AAAA;AAAA,GAA3B;AA8BP,OAAO,IAAMe,sBAAsB;AAAA,uEAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9Bd,YAAAA,SAD8B,GAClBV,WADkB;AAAA;AAAA,mBAEDG,SAAS,CAC1CD,OAD0C,EAE1CQ,SAAS,CAACC,GAAV,CAAc,UAACC,QAAD;AAAA,qBAAe;AAC3BC,gBAAAA,OAAO,EAAED,QAAQ,CAACa,mBAAT,CAA6BpB,QAA7B,CADkB;AAE3BU,gBAAAA,IAAI,EAAE,WAFqB;AAG3BW,gBAAAA,MAAM,EAAE,CAACd,QAAQ,CAACE,eAAT,CAAyBT,QAAzB,CAAD;AAHmB,eAAf;AAAA,aAAd,CAF0C,CAFR;;AAAA;AAE9BsB,YAAAA,oBAF8B;AAAA,iEAY/BjB,SAAS,CAACC,GAAV,CAAc,UAACiB,CAAD,EAAIT,KAAJ;AAAA,qBAAe;AAC9BG,gBAAAA,MAAM,EAAEM,CAAC,CAACN,MADoB;AAE9BO,gBAAAA,WAAW,EAAE,IAAIzB,SAAJ,CAAcuB,oBAAoB,CAACR,KAAD,CAAlC,EAA2CI,MAA3C;AAFiB,eAAf;AAAA,aAAd,CAZ+B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAAtBC,sBAAsB;AAAA;AAAA;AAAA,GAA5B","sourcesContent":["import poolsConfig from 'config/constants/pools'\r\nimport sousChefABI from 'config/abi/sousChef.json'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport multicall from 'utils/multicall'\r\nimport BigNumber from 'bignumber.js'\r\n\r\nconst CHAIN_ID = process.env.REACT_APP_CHAIN_ID\r\n\r\nexport const fetchPoolsBlockLimits = async () => {\r\n  const cakePools = poolsConfig\r\n  const cakeStarts = await multicall(\r\n    sousChefABI,\r\n    cakePools.map((cakePool) => ({\r\n      address: cakePool.contractAddress[CHAIN_ID],\r\n      name: 'startBlock',\r\n    })),\r\n  )\r\n  const cakeEnds = await multicall(\r\n    sousChefABI,\r\n    cakePools.map((cakePool) => ({\r\n      address: cakePool.contractAddress[CHAIN_ID],\r\n      name: 'bonusEndBlock',\r\n    })),\r\n  )\r\n\r\n  return [\r\n    ...cakePools.map((poolConfig, index) => {\r\n      const startBlock = cakeStarts[index]\r\n      const endBlock = cakeEnds[index]\r\n      return {\r\n        sousId: poolConfig.sousId,\r\n        startBlock: new BigNumber(startBlock).toJSON(),\r\n        endBlock: new BigNumber(endBlock).toJSON(),\r\n      }\r\n    }),\r\n  ]\r\n}\r\n\r\nexport const fetchPoolsTotalStaking = async () => {\r\n  const cakePools = poolsConfig\r\n  const cakePoolsTotalStaked = await multicall(\r\n    cakeABI,\r\n    cakePools.map((cakePool) => ({\r\n      address: cakePool.stakingTokenAddress[CHAIN_ID],\r\n      name: 'balanceOf',\r\n      params: [cakePool.contractAddress[CHAIN_ID]],\r\n    })),\r\n  )\r\n\r\n  return [\r\n    ...cakePools.map((p, index) => ({\r\n      sousId: p.sousId,\r\n      totalStaked: new BigNumber(cakePoolsTotalStaked[index]).toJSON(),\r\n    })),\r\n  ]\r\n}\r\n"]},"metadata":{},"sourceType":"module"}