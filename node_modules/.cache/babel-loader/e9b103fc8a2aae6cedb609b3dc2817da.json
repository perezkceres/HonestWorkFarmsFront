{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport { Interface } from '@ethersproject/abi';\nimport { getWeb3 } from 'utils/web3';\nimport MultiCallAbi from 'config/abi/Multicall.json';\nimport { getMulticallAddress } from 'utils/addressHelpers';\n\nvar multicall = /*#__PURE__*/function () {\n  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(abi, calls) {\n    var web3, multi, itf, calldata, _yield$multi$methods$, returnData, res;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            web3 = getWeb3();\n            multi = new web3.eth.Contract(MultiCallAbi, getMulticallAddress());\n            itf = new Interface(abi);\n            calldata = calls.map(function (call) {\n              return [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)];\n            });\n            _context.next = 6;\n            return multi.methods.aggregate(calldata).call();\n\n          case 6:\n            _yield$multi$methods$ = _context.sent;\n            returnData = _yield$multi$methods$.returnData;\n            res = returnData.map(function (call, i) {\n              return itf.decodeFunctionResult(calls[i].name, call);\n            });\n            return _context.abrupt(\"return\", res);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function multicall(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nexport default multicall;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/utils/multicall.ts"],"names":["Interface","getWeb3","MultiCallAbi","getMulticallAddress","multicall","abi","calls","web3","multi","eth","Contract","itf","calldata","map","call","address","toLowerCase","encodeFunctionData","name","params","methods","aggregate","returnData","res","i","decodeFunctionResult"],"mappings":";;AACA,SAASA,SAAT,QAA0B,oBAA1B;AACA,SAASC,OAAT,QAAwB,YAAxB;AACA,OAAOC,YAAP,MAAyB,2BAAzB;AACA,SAASC,mBAAT,QAAoC,sBAApC;;AAQA,IAAMC,SAAS;AAAA,sEAAG,iBAAOC,GAAP,EAAmBC,KAAnB;AAAA;;AAAA;AAAA;AAAA;AAAA;AACVC,YAAAA,IADU,GACHN,OAAO,EADJ;AAEVO,YAAAA,KAFU,GAEF,IAAID,IAAI,CAACE,GAAL,CAASC,QAAb,CAAuBR,YAAvB,EAA4DC,mBAAmB,EAA/E,CAFE;AAGVQ,YAAAA,GAHU,GAGJ,IAAIX,SAAJ,CAAcK,GAAd,CAHI;AAKVO,YAAAA,QALU,GAKCN,KAAK,CAACO,GAAN,CAAU,UAACC,IAAD;AAAA,qBAAU,CAACA,IAAI,CAACC,OAAL,CAAaC,WAAb,EAAD,EAA6BL,GAAG,CAACM,kBAAJ,CAAuBH,IAAI,CAACI,IAA5B,EAAkCJ,IAAI,CAACK,MAAvC,CAA7B,CAAV;AAAA,aAAV,CALD;AAAA;AAAA,mBAMaX,KAAK,CAACY,OAAN,CAAcC,SAAd,CAAwBT,QAAxB,EAAkCE,IAAlC,EANb;;AAAA;AAAA;AAMRQ,YAAAA,UANQ,yBAMRA,UANQ;AAOVC,YAAAA,GAPU,GAOJD,UAAU,CAACT,GAAX,CAAe,UAACC,IAAD,EAAOU,CAAP;AAAA,qBAAab,GAAG,CAACc,oBAAJ,CAAyBnB,KAAK,CAACkB,CAAD,CAAL,CAASN,IAAlC,EAAwCJ,IAAxC,CAAb;AAAA,aAAf,CAPI;AAAA,6CASTS,GATS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAH;;AAAA,kBAATnB,SAAS;AAAA;AAAA;AAAA,GAAf;;AAYA,eAAeA,SAAf","sourcesContent":["import { AbiItem } from 'web3-utils'\r\nimport { Interface } from '@ethersproject/abi'\r\nimport { getWeb3 } from 'utils/web3'\r\nimport MultiCallAbi from 'config/abi/Multicall.json'\r\nimport { getMulticallAddress } from 'utils/addressHelpers'\r\n\r\ninterface Call {\r\n  address: string // Address of the contract\r\n  name: string // Function name on the contract (exemple: balanceOf)\r\n  params?: any[] // Function params\r\n}\r\n\r\nconst multicall = async (abi: any[], calls: Call[]) => {\r\n  const web3 = getWeb3()\r\n  const multi = new web3.eth.Contract((MultiCallAbi as unknown) as AbiItem, getMulticallAddress())\r\n  const itf = new Interface(abi)\r\n\r\n  const calldata = calls.map((call) => [call.address.toLowerCase(), itf.encodeFunctionData(call.name, call.params)])\r\n  const { returnData } = await multi.methods.aggregate(calldata).call()\r\n  const res = returnData.map((call, i) => itf.decodeFunctionResult(calls[i].name, call))\r\n\r\n  return res\r\n}\r\n\r\nexport default multicall\r\n"]},"metadata":{},"sourceType":"module"}