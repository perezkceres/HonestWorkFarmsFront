{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport _slicedToArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _jsxFileName = \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/contexts/ThemeContext.tsx\",\n    _this = this,\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { ThemeProvider as SCThemeProvider } from 'styled-components';\nimport { light, dark } from '@pancakeswap-libs/uikit';\nvar CACHE_KEY = 'IS_DARK';\nvar ThemeContext = /*#__PURE__*/React.createContext({\n  isDark: null,\n  toggleTheme: function toggleTheme() {\n    return null;\n  }\n});\n\nvar ThemeContextProvider = function ThemeContextProvider(_ref) {\n  _s();\n\n  var children = _ref.children;\n\n  var _useState = useState(function () {\n    var isDarkUserSetting = localStorage.getItem(CACHE_KEY);\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false;\n  }),\n      _useState2 = _slicedToArray(_useState, 2),\n      isDark = _useState2[0],\n      setIsDark = _useState2[1];\n\n  var toggleTheme = function toggleTheme() {\n    setIsDark(function (prevState) {\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState));\n      return !prevState;\n    });\n  };\n\n  return /*#__PURE__*/_jsxDEV(ThemeContext.Provider, {\n    value: {\n      isDark: isDark,\n      toggleTheme: toggleTheme\n    },\n    children: /*#__PURE__*/_jsxDEV(SCThemeProvider, {\n      theme: isDark ? dark : light,\n      children: children\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 24,\n      columnNumber: 7\n    }, _this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 23,\n    columnNumber: 5\n  }, _this);\n};\n\n_s(ThemeContextProvider, \"TVgtWHXbYOYZQRZISvDNKzIbL7A=\");\n\n_c = ThemeContextProvider;\nexport { ThemeContext, ThemeContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"ThemeContextProvider\");","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/contexts/ThemeContext.tsx"],"names":["React","useState","ThemeProvider","SCThemeProvider","light","dark","CACHE_KEY","ThemeContext","createContext","isDark","toggleTheme","ThemeContextProvider","children","isDarkUserSetting","localStorage","getItem","JSON","parse","setIsDark","prevState","setItem","stringify"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,SAASC,aAAa,IAAIC,eAA1B,QAAiD,mBAAjD;AACA,SAASC,KAAT,EAAgBC,IAAhB,QAA4B,yBAA5B;AAEA,IAAMC,SAAS,GAAG,SAAlB;AAEA,IAAMC,YAAY,gBAAGP,KAAK,CAACQ,aAAN,CAAoB;AAAEC,EAAAA,MAAM,EAAE,IAAV;AAAgBC,EAAAA,WAAW,EAAE;AAAA,WAAM,IAAN;AAAA;AAA7B,CAApB,CAArB;;AAEA,IAAMC,oBAAoB,GAAG,SAAvBA,oBAAuB,OAAkB;AAAA;;AAAA,MAAfC,QAAe,QAAfA,QAAe;;AAAA,kBACjBX,QAAQ,CAAC,YAAM;AACzC,QAAMY,iBAAiB,GAAGC,YAAY,CAACC,OAAb,CAAqBT,SAArB,CAA1B;AACA,WAAOO,iBAAiB,GAAGG,IAAI,CAACC,KAAL,CAAWJ,iBAAX,CAAH,GAAmC,KAA3D;AACD,GAHmC,CADS;AAAA;AAAA,MACtCJ,MADsC;AAAA,MAC9BS,SAD8B;;AAM7C,MAAMR,WAAW,GAAG,SAAdA,WAAc,GAAM;AACxBQ,IAAAA,SAAS,CAAC,UAACC,SAAD,EAAe;AACvBL,MAAAA,YAAY,CAACM,OAAb,CAAqBd,SAArB,EAAgCU,IAAI,CAACK,SAAL,CAAe,CAACF,SAAhB,CAAhC;AACA,aAAO,CAACA,SAAR;AACD,KAHQ,CAAT;AAID,GALD;;AAOA,sBACE,QAAC,YAAD,CAAc,QAAd;AAAuB,IAAA,KAAK,EAAE;AAAEV,MAAAA,MAAM,EAANA,MAAF;AAAUC,MAAAA,WAAW,EAAXA;AAAV,KAA9B;AAAA,2BACE,QAAC,eAAD;AAAiB,MAAA,KAAK,EAAED,MAAM,GAAGJ,IAAH,GAAUD,KAAxC;AAAA,gBAAgDQ;AAAhD;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,WADF;AAKD,CAlBD;;GAAMD,oB;;KAAAA,oB;AAoBN,SAASJ,YAAT,EAAuBI,oBAAvB","sourcesContent":["import React, { useState } from 'react'\r\nimport { ThemeProvider as SCThemeProvider } from 'styled-components'\r\nimport { light, dark } from '@pancakeswap-libs/uikit'\r\n\r\nconst CACHE_KEY = 'IS_DARK'\r\n\r\nconst ThemeContext = React.createContext({ isDark: null, toggleTheme: () => null })\r\n\r\nconst ThemeContextProvider = ({ children }) => {\r\n  const [isDark, setIsDark] = useState(() => {\r\n    const isDarkUserSetting = localStorage.getItem(CACHE_KEY)\r\n    return isDarkUserSetting ? JSON.parse(isDarkUserSetting) : false\r\n  })\r\n\r\n  const toggleTheme = () => {\r\n    setIsDark((prevState) => {\r\n      localStorage.setItem(CACHE_KEY, JSON.stringify(!prevState))\r\n      return !prevState\r\n    })\r\n  }\r\n\r\n  return (\r\n    <ThemeContext.Provider value={{ isDark, toggleTheme }}>\r\n      <SCThemeProvider theme={isDark ? dark : light}>{children}</SCThemeProvider>\r\n    </ThemeContext.Provider>\r\n  )\r\n}\r\n\r\nexport { ThemeContext, ThemeContextProvider }\r\n"]},"metadata":{},"sourceType":"module"}