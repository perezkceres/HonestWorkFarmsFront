{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport cakeABI from 'config/abi/cake.json';\nimport { getContract } from 'utils/web3';\nimport { getTokenBalance } from 'utils/erc20';\nimport { getLotteryAddress, getCakeAddress } from 'utils/addressHelpers';\nimport multicall from 'utils/multicall';\nimport erc20 from 'config/abi/erc20.json';\nimport useRefresh from './useRefresh'; // const useTokenBalance = (tokenAddress: string) => {\n//   const [balance, setBalance] = useState(new BigNumber(0))\n//   const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\n//   const { fastRefresh } = useRefresh()\n//\n//   useEffect(() => {\n//     const fetchBalance = async () => {\n//       const res = await getTokenBalance(ethereum, tokenAddress, account)\n//       setBalance(new BigNumber(res))\n//     }\n//\n//     if (account && ethereum) {\n//       fetchBalance()\n//     }\n//   }, [account, ethereum, tokenAddress, fastRefresh])\n//\n//   return balance\n// }\n\nvar useTokenBalance = function useTokenBalance(tokenAddress, _account, _provider) {\n  _s();\n\n  var _useState = useState(new BigNumber(0)),\n      _useState2 = _slicedToArray(_useState, 2),\n      balance = _useState2[0],\n      setBalance = _useState2[1];\n\n  var _useWallet = useWallet(),\n      useAccount = _useWallet.account,\n      ethereum = _useWallet.ethereum;\n\n  var _useRefresh = useRefresh(),\n      fastRefresh = _useRefresh.fastRefresh;\n\n  var account = _account || useAccount;\n  var currentProvider = _provider || ethereum;\n  useEffect(function () {\n    var fetchBalance = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var res;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return getTokenBalance(currentProvider, tokenAddress, account);\n\n              case 2:\n                res = _context.sent;\n                setBalance(new BigNumber(res));\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchBalance() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (account && currentProvider) {\n      fetchBalance();\n    }\n  }, [account, currentProvider, tokenAddress, fastRefresh]);\n  return balance;\n};\n\n_s(useTokenBalance, \"32EXgooNTfal9DegVncjTHS6Y0w=\", false, function () {\n  return [useWallet, useRefresh];\n});\n\nexport var useTotalSupply = function useTotalSupply() {\n  _s2();\n\n  var _useRefresh2 = useRefresh(),\n      slowRefresh = _useRefresh2.slowRefresh;\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      totalSupply = _useState4[0],\n      setTotalSupply = _useState4[1];\n\n  useEffect(function () {\n    function fetchTotalSupply() {\n      return _fetchTotalSupply.apply(this, arguments);\n    }\n\n    function _fetchTotalSupply() {\n      _fetchTotalSupply = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var cakeContract, supply;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                cakeContract = getContract(cakeABI, getCakeAddress());\n                _context2.next = 3;\n                return cakeContract.methods.totalSupply().call();\n\n              case 3:\n                supply = _context2.sent;\n                setTotalSupply(new BigNumber(supply));\n\n              case 5:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n      return _fetchTotalSupply.apply(this, arguments);\n    }\n\n    fetchTotalSupply();\n  }, [slowRefresh]);\n  return totalSupply;\n};\n\n_s2(useTotalSupply, \"2ibDHTZcwYU9LaabTrlsn9E1ufk=\", false, function () {\n  return [useRefresh];\n});\n\nexport var useBurnedBalance = function useBurnedBalance(tokenAddress) {\n  _s3();\n\n  var _useState5 = useState(new BigNumber(0)),\n      _useState6 = _slicedToArray(_useState5, 2),\n      balance = _useState6[0],\n      setBalance = _useState6[1];\n\n  var _useRefresh3 = useRefresh(),\n      slowRefresh = _useRefresh3.slowRefresh;\n\n  useEffect(function () {\n    var fetchBalance = /*#__PURE__*/function () {\n      var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var cakeContract, bal;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                cakeContract = getContract(cakeABI, getCakeAddress());\n                _context3.next = 3;\n                return cakeContract.methods.balanceOf('0x541Ead1E03b5D456F53e87A92295958E72022d89').call();\n\n              case 3:\n                bal = _context3.sent;\n                setBalance(new BigNumber(bal));\n\n              case 5:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3);\n      }));\n\n      return function fetchBalance() {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n\n    fetchBalance();\n  }, [tokenAddress, slowRefresh]);\n  return balance;\n};\n\n_s3(useBurnedBalance, \"qyENdKcKAtFXxHK1y11FyHVhXpA=\", false, function () {\n  return [useRefresh];\n});\n\nexport var useLotteryLockedBalance = function useLotteryLockedBalance(tokenAddress) {\n  _s4();\n\n  var _useState7 = useState(new BigNumber(0)),\n      _useState8 = _slicedToArray(_useState7, 2),\n      balance = _useState8[0],\n      setBalance = _useState8[1];\n\n  var _useRefresh4 = useRefresh(),\n      slowRefresh = _useRefresh4.slowRefresh;\n\n  useEffect(function () {\n    var fetchBalance = /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var burnAddress, _yield$multicall, _yield$multicall2, burnedCakeBalance;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                burnAddress = getLotteryAddress();\n                _context4.next = 3;\n                return multicall(erc20, [{\n                  address: tokenAddress,\n                  name: 'balanceOf',\n                  params: [burnAddress]\n                }]);\n\n              case 3:\n                _yield$multicall = _context4.sent;\n                _yield$multicall2 = _slicedToArray(_yield$multicall, 1);\n                burnedCakeBalance = _yield$multicall2[0];\n\n                if (burnedCakeBalance) {\n                  _context4.next = 8;\n                  break;\n                }\n\n                return _context4.abrupt(\"return\");\n\n              case 8:\n                setBalance(new BigNumber(burnedCakeBalance));\n\n              case 9:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4);\n      }));\n\n      return function fetchBalance() {\n        return _ref3.apply(this, arguments);\n      };\n    }();\n\n    fetchBalance();\n  }, [slowRefresh, tokenAddress]);\n\n  if (!balance) {\n    return new BigNumber(0);\n  }\n\n  return balance;\n};\n\n_s4(useLotteryLockedBalance, \"qyENdKcKAtFXxHK1y11FyHVhXpA=\", false, function () {\n  return [useRefresh];\n});\n\nexport default useTokenBalance;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/hooks/useTokenBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","cakeABI","getContract","getTokenBalance","getLotteryAddress","getCakeAddress","multicall","erc20","useRefresh","useTokenBalance","tokenAddress","_account","_provider","balance","setBalance","useAccount","account","ethereum","fastRefresh","currentProvider","fetchBalance","res","useTotalSupply","slowRefresh","totalSupply","setTotalSupply","fetchTotalSupply","cakeContract","methods","call","supply","useBurnedBalance","balanceOf","bal","useLotteryLockedBalance","burnAddress","address","name","params","burnedCakeBalance"],"mappings":"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","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { provider } from 'web3-core'\r\nimport cakeABI from 'config/abi/cake.json'\r\nimport { getContract } from 'utils/web3'\r\nimport { getTokenBalance } from 'utils/erc20'\r\nimport {getLotteryAddress, getCakeAddress} from 'utils/addressHelpers'\r\nimport multicall from 'utils/multicall'\r\nimport erc20 from 'config/abi/erc20.json'\r\nimport useRefresh from './useRefresh'\r\n\r\n// const useTokenBalance = (tokenAddress: string) => {\r\n//   const [balance, setBalance] = useState(new BigNumber(0))\r\n//   const { account, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n//   const { fastRefresh } = useRefresh()\r\n//\r\n//   useEffect(() => {\r\n//     const fetchBalance = async () => {\r\n//       const res = await getTokenBalance(ethereum, tokenAddress, account)\r\n//       setBalance(new BigNumber(res))\r\n//     }\r\n//\r\n//     if (account && ethereum) {\r\n//       fetchBalance()\r\n//     }\r\n//   }, [account, ethereum, tokenAddress, fastRefresh])\r\n//\r\n//   return balance\r\n// }\r\n\r\nconst useTokenBalance = (tokenAddress: string, _account?: string, _provider?: any) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { account: useAccount, ethereum }: { account: string; ethereum: provider } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n  const account = _account || useAccount;\r\n  const currentProvider = _provider || ethereum;\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const res = await getTokenBalance(currentProvider, tokenAddress, account)\r\n      setBalance(new BigNumber(res))\r\n    }\r\n\r\n    if (account && currentProvider) {\r\n      fetchBalance()\r\n    }\r\n  }, [account, currentProvider, tokenAddress, fastRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useTotalSupply = () => {\r\n  const { slowRefresh } = useRefresh()\r\n  const [totalSupply, setTotalSupply] = useState<BigNumber>()\r\n\r\n  useEffect(() => {\r\n    async function fetchTotalSupply() {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const supply = await cakeContract.methods.totalSupply().call()\r\n      setTotalSupply(new BigNumber(supply))\r\n    }\r\n\r\n    fetchTotalSupply()\r\n  }, [slowRefresh])\r\n\r\n  return totalSupply\r\n}\r\n\r\nexport const useBurnedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const cakeContract = getContract(cakeABI, getCakeAddress())\r\n      const bal = await cakeContract.methods.balanceOf('0x541Ead1E03b5D456F53e87A92295958E72022d89').call()\r\n      setBalance(new BigNumber(bal))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [tokenAddress, slowRefresh])\r\n\r\n  return balance\r\n}\r\n\r\nexport const useLotteryLockedBalance = (tokenAddress: string) => {\r\n  const [balance, setBalance] = useState(new BigNumber(0))\r\n  const { slowRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalance = async () => {\r\n      const burnAddress = getLotteryAddress()\r\n      const [burnedCakeBalance] = await multicall(erc20, [\r\n        {\r\n          address: tokenAddress,\r\n          name: 'balanceOf',\r\n          params: [burnAddress],\r\n        },\r\n      ])\r\n\r\n      if (!burnedCakeBalance) return\r\n\r\n      setBalance(new BigNumber(burnedCakeBalance))\r\n    }\r\n\r\n    fetchBalance()\r\n  }, [slowRefresh, tokenAddress])\r\n\r\n  if (!balance) {\r\n    return new BigNumber(0)\r\n  }\r\n\r\n  return balance\r\n}\r\n\r\nexport default useTokenBalance\r\n"]},"metadata":{},"sourceType":"module"}