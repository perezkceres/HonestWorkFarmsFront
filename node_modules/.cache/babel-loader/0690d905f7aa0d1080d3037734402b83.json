{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState } from 'react';\nimport BigNumber from 'bignumber.js';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport multicall from 'utils/multicall';\nimport { getMasterChefAddress } from 'utils/addressHelpers';\nimport masterChefABI from 'config/abi/masterchef.json';\nimport { farmsConfig } from 'config/constants';\nimport useRefresh from './useRefresh';\n\nvar useFarmsWithBalance = function useFarmsWithBalance() {\n  _s();\n\n  var _useState = useState([]),\n      _useState2 = _slicedToArray(_useState, 2),\n      farmsWithBalances = _useState2[0],\n      setFarmsWithBalances = _useState2[1];\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account;\n\n  var _useRefresh = useRefresh(),\n      fastRefresh = _useRefresh.fastRefresh;\n\n  useEffect(function () {\n    var fetchBalances = /*#__PURE__*/function () {\n      var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        var calls, rawResults, results;\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                calls = farmsConfig.map(function (farm) {\n                  return {\n                    address: getMasterChefAddress(),\n                    name: 'pendinghonest',\n                    params: [farm.pid, account]\n                  };\n                });\n                _context.next = 3;\n                return multicall(masterChefABI, calls);\n\n              case 3:\n                rawResults = _context.sent;\n                results = farmsConfig.map(function (farm, index) {\n                  return _objectSpread(_objectSpread({}, farm), {}, {\n                    balance: new BigNumber(rawResults[index])\n                  });\n                });\n                setFarmsWithBalances(results);\n\n              case 6:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee);\n      }));\n\n      return function fetchBalances() {\n        return _ref.apply(this, arguments);\n      };\n    }();\n\n    if (account) {\n      fetchBalances();\n    }\n  }, [account, fastRefresh]);\n  return farmsWithBalances;\n};\n\n_s(useFarmsWithBalance, \"CHNPAMzPWe7dKEIn65bMTj3w5JE=\", false, function () {\n  return [useWallet, useRefresh];\n});\n\nexport default useFarmsWithBalance;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/hooks/useFarmsWithBalance.ts"],"names":["useEffect","useState","BigNumber","useWallet","multicall","getMasterChefAddress","masterChefABI","farmsConfig","useRefresh","useFarmsWithBalance","farmsWithBalances","setFarmsWithBalances","account","fastRefresh","fetchBalances","calls","map","farm","address","name","params","pid","rawResults","results","index","balance"],"mappings":";;;;;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,OAAOC,SAAP,MAAsB,cAAtB;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AACA,SAASC,oBAAT,QAAqC,sBAArC;AACA,OAAOC,aAAP,MAA0B,4BAA1B;AACA,SAASC,WAAT,QAA4B,kBAA5B;AAEA,OAAOC,UAAP,MAAuB,cAAvB;;AAMA,IAAMC,mBAAmB,GAAG,SAAtBA,mBAAsB,GAAM;AAAA;;AAAA,kBACkBR,QAAQ,CAAoB,EAApB,CAD1B;AAAA;AAAA,MACzBS,iBADyB;AAAA,MACNC,oBADM;;AAAA,mBAEZR,SAAS,EAFG;AAAA,MAExBS,OAFwB,cAExBA,OAFwB;;AAAA,oBAGRJ,UAAU,EAHF;AAAA,MAGxBK,WAHwB,eAGxBA,WAHwB;;AAKhCb,EAAAA,SAAS,CAAC,YAAM;AACd,QAAMc,aAAa;AAAA,0EAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AACdC,gBAAAA,KADc,GACNR,WAAW,CAACS,GAAZ,CAAgB,UAACC,IAAD;AAAA,yBAAW;AACvCC,oBAAAA,OAAO,EAAEb,oBAAoB,EADU;AAEvCc,oBAAAA,IAAI,EAAE,eAFiC;AAGvCC,oBAAAA,MAAM,EAAE,CAACH,IAAI,CAACI,GAAN,EAAWT,OAAX;AAH+B,mBAAX;AAAA,iBAAhB,CADM;AAAA;AAAA,uBAOKR,SAAS,CAACE,aAAD,EAAgBS,KAAhB,CAPd;;AAAA;AAOdO,gBAAAA,UAPc;AAQdC,gBAAAA,OARc,GAQJhB,WAAW,CAACS,GAAZ,CAAgB,UAACC,IAAD,EAAOO,KAAP;AAAA,yDAAuBP,IAAvB;AAA6BQ,oBAAAA,OAAO,EAAE,IAAIvB,SAAJ,CAAcoB,UAAU,CAACE,KAAD,CAAxB;AAAtC;AAAA,iBAAhB,CARI;AAUpBb,gBAAAA,oBAAoB,CAACY,OAAD,CAApB;;AAVoB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAH;;AAAA,sBAAbT,aAAa;AAAA;AAAA;AAAA,OAAnB;;AAaA,QAAIF,OAAJ,EAAa;AACXE,MAAAA,aAAa;AACd;AACF,GAjBQ,EAiBN,CAACF,OAAD,EAAUC,WAAV,CAjBM,CAAT;AAmBA,SAAOH,iBAAP;AACD,CAzBD;;GAAMD,mB;UAEgBN,S,EACIK,U;;;AAwB1B,eAAeC,mBAAf","sourcesContent":["import { useEffect, useState } from 'react'\r\nimport BigNumber from 'bignumber.js'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport multicall from 'utils/multicall'\r\nimport { getMasterChefAddress } from 'utils/addressHelpers'\r\nimport masterChefABI from 'config/abi/masterchef.json'\r\nimport { farmsConfig } from 'config/constants'\r\nimport { FarmConfig } from 'config/constants/types'\r\nimport useRefresh from './useRefresh'\r\n\r\nexport interface FarmWithBalance extends FarmConfig {\r\n  balance: BigNumber\r\n}\r\n\r\nconst useFarmsWithBalance = () => {\r\n  const [farmsWithBalances, setFarmsWithBalances] = useState<FarmWithBalance[]>([])\r\n  const { account } = useWallet()\r\n  const { fastRefresh } = useRefresh()\r\n\r\n  useEffect(() => {\r\n    const fetchBalances = async () => {\r\n      const calls = farmsConfig.map((farm) => ({\r\n        address: getMasterChefAddress(),\r\n        name: 'pendinghonest',\r\n        params: [farm.pid, account],\r\n      }))\r\n\r\n      const rawResults = await multicall(masterChefABI, calls)\r\n      const results = farmsConfig.map((farm, index) => ({ ...farm, balance: new BigNumber(rawResults[index]) }))\r\n\r\n      setFarmsWithBalances(results)\r\n    }\r\n\r\n    if (account) {\r\n      fetchBalances()\r\n    }\r\n  }, [account, fastRefresh])\r\n\r\n  return farmsWithBalances\r\n}\r\n\r\nexport default useFarmsWithBalance\r\n"]},"metadata":{},"sourceType":"module"}