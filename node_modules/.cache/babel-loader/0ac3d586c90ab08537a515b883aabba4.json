{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions';\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers';\nimport { useMasterchef, useSmartChef } from './useContract';\n\nvar useStake = function useStake(pid) {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account;\n\n  var masterChefContract = useMasterchef();\n  var handleStake = useCallback( /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(amount) {\n      var txHash;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return stake(masterChefContract, pid, amount, account);\n\n            case 2:\n              txHash = _context.sent;\n              dispatch(fetchFarmUserDataAsync(account));\n              console.info(txHash);\n\n            case 5:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }(), [account, dispatch, masterChefContract, pid]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s(useStake, \"czMcmnP38Pb/7Q/GWJw52z/pz6w=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport var useSmartStake = function useSmartStake(sousId) {\n  _s2();\n\n  var isUsingBnb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var dispatch = useDispatch();\n\n  var _useWallet2 = useWallet(),\n      account = _useWallet2.account;\n\n  var smartChefContract = useSmartChef(sousId);\n  var handleStake = useCallback( /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(amount) {\n      var stakeFn;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              stakeFn = isUsingBnb ? smartStakeBnb : smartStake;\n              _context2.next = 3;\n              return stakeFn(smartChefContract, amount, account);\n\n            case 3:\n              dispatch(updateUserStakedBalance(String(sousId), account));\n              dispatch(updateUserBalance(String(sousId), account));\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }(), [account, dispatch, isUsingBnb, smartChefContract, sousId]);\n  return {\n    onStake: handleStake\n  };\n};\n\n_s2(useSmartStake, \"xw8w27H2cQx5H9wumOYwv2Cz6Gc=\", false, function () {\n  return [useDispatch, useWallet, useSmartChef];\n});\n\nexport default useStake;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/hooks/useStake.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserStakedBalance","updateUserBalance","stake","smartStakeBnb","smartStake","useMasterchef","useSmartChef","useStake","pid","dispatch","account","masterChefContract","handleStake","amount","txHash","console","info","onStake","useSmartStake","sousId","isUsingBnb","smartChefContract","stakeFn","String"],"mappings":";;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,sBAAT,EAAiCC,uBAAjC,EAA0DC,iBAA1D,QAAmF,eAAnF;AACA,SAASC,KAAT,EAAgBC,aAAhB,EAA+BC,UAA/B,QAAiD,mBAAjD;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,eAA5C;;AAEA,IAAMC,QAAQ,GAAG,SAAXA,QAAW,CAACC,GAAD,EAAiB;AAAA;;AAChC,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;;AADgC,mBAEZD,SAAS,EAFG;AAAA,MAExBa,OAFwB,cAExBA,OAFwB;;AAGhC,MAAMC,kBAAkB,GAAGN,aAAa,EAAxC;AAEA,MAAMO,WAAW,GAAGhB,WAAW;AAAA,wEAC7B,iBAAOiB,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACuBX,KAAK,CAACS,kBAAD,EAAqBH,GAArB,EAA0BK,MAA1B,EAAkCH,OAAlC,CAD5B;;AAAA;AACQI,cAAAA,MADR;AAEEL,cAAAA,QAAQ,CAACV,sBAAsB,CAACW,OAAD,CAAvB,CAAR;AACAK,cAAAA,OAAO,CAACC,IAAR,CAAaF,MAAb;;AAHF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD6B;;AAAA;AAAA;AAAA;AAAA,OAM7B,CAACJ,OAAD,EAAUD,QAAV,EAAoBE,kBAApB,EAAwCH,GAAxC,CAN6B,CAA/B;AASA,SAAO;AAAES,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAfD;;GAAML,Q;UACaT,W,EACGD,S,EACOQ,a;;;AAe7B,OAAO,IAAMa,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAAwC;AAAA;;AAAA,MAAvBC,UAAuB,uEAAV,KAAU;AACnE,MAAMX,QAAQ,GAAGX,WAAW,EAA5B;;AADmE,oBAE/CD,SAAS,EAFsC;AAAA,MAE3Da,OAF2D,eAE3DA,OAF2D;;AAGnE,MAAMW,iBAAiB,GAAGf,YAAY,CAACa,MAAD,CAAtC;AAEA,MAAMP,WAAW,GAAGhB,WAAW;AAAA,yEAC7B,kBAAOiB,MAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AACQS,cAAAA,OADR,GACkBF,UAAU,GAAGjB,aAAH,GAAmBC,UAD/C;AAAA;AAAA,qBAEQkB,OAAO,CAACD,iBAAD,EAAoBR,MAApB,EAA4BH,OAA5B,CAFf;;AAAA;AAGED,cAAAA,QAAQ,CAACT,uBAAuB,CAACuB,MAAM,CAACJ,MAAD,CAAP,EAAiBT,OAAjB,CAAxB,CAAR;AACAD,cAAAA,QAAQ,CAACR,iBAAiB,CAACsB,MAAM,CAACJ,MAAD,CAAP,EAAiBT,OAAjB,CAAlB,CAAR;;AAJF;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAD6B;;AAAA;AAAA;AAAA;AAAA,OAO7B,CAACA,OAAD,EAAUD,QAAV,EAAoBW,UAApB,EAAgCC,iBAAhC,EAAmDF,MAAnD,CAP6B,CAA/B;AAUA,SAAO;AAAEF,IAAAA,OAAO,EAAEL;AAAX,GAAP;AACD,CAhBM;;IAAMM,a;UACMpB,W,EACGD,S,EACMS,Y;;;AAe5B,eAAeC,QAAf","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserStakedBalance, updateUserBalance } from 'state/actions'\r\nimport { stake, smartStakeBnb, smartStake } from 'utils/callHelpers'\r\nimport { useMasterchef, useSmartChef } from './useContract'\r\n\r\nconst useStake = (pid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const txHash = await stake(masterChefContract, pid, amount, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      console.info(txHash)\r\n    },\r\n    [account, dispatch, masterChefContract, pid],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\n\r\nexport const useSmartStake = (sousId: number, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleStake = useCallback(\r\n    async (amount: string) => {\r\n      const stakeFn = isUsingBnb ? smartStakeBnb : smartStake\r\n      await stakeFn(smartChefContract, amount, account)\r\n      dispatch(updateUserStakedBalance(String(sousId), account))\r\n      dispatch(updateUserBalance(String(sousId), account))\r\n    },\r\n    [account, dispatch, isUsingBnb, smartChefContract, sousId],\r\n  )\r\n\r\n  return { onStake: handleStake }\r\n}\r\n\r\nexport default useStake\r\n"]},"metadata":{},"sourceType":"module"}