{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _objectSpread from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport farmsConfig from 'config/constants/farms';\nimport fetchFarms from './fetchFarms';\nimport { fetchFarmUserEarnings, fetchFarmUserAllowances, fetchFarmUserTokenBalances, fetchFarmUserStakedBalances } from './fetchFarmUser';\nvar initialState = {\n  data: _toConsumableArray(farmsConfig)\n};\nexport var farmsSlice = createSlice({\n  name: 'Farms',\n  initialState: initialState,\n  reducers: {\n    setFarmsPublicData: function setFarmsPublicData(state, action) {\n      var liveFarmsData = action.payload;\n      state.data = state.data.map(function (farm) {\n        var liveFarmData = liveFarmsData.find(function (f) {\n          return f.pid === farm.pid;\n        });\n        return _objectSpread(_objectSpread({}, farm), liveFarmData);\n      });\n    },\n    setFarmUserData: function setFarmUserData(state, action) {\n      var arrayOfUserDataObjects = action.payload.arrayOfUserDataObjects;\n      arrayOfUserDataObjects.forEach(function (userDataEl) {\n        var index = userDataEl.index;\n        state.data[index] = _objectSpread(_objectSpread({}, state.data[index]), {}, {\n          userData: userDataEl\n        });\n      });\n    }\n  }\n}); // Actions\n\nvar _farmsSlice$actions = farmsSlice.actions,\n    setFarmsPublicData = _farmsSlice$actions.setFarmsPublicData,\n    setFarmUserData = _farmsSlice$actions.setFarmUserData; // Thunks\n\nexport { setFarmsPublicData, setFarmUserData };\nexport var fetchFarmsPublicDataAsync = function fetchFarmsPublicDataAsync() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var farms;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetchFarms();\n\n            case 2:\n              farms = _context.sent;\n              dispatch(setFarmsPublicData(farms));\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var fetchFarmUserDataAsync = function fetchFarmUserDataAsync(account) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var userFarmAllowances, userFarmTokenBalances, userStakedBalances, userFarmEarnings, arrayOfUserDataObjects;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetchFarmUserAllowances(account);\n\n            case 2:\n              userFarmAllowances = _context2.sent;\n              _context2.next = 5;\n              return fetchFarmUserTokenBalances(account);\n\n            case 5:\n              userFarmTokenBalances = _context2.sent;\n              _context2.next = 8;\n              return fetchFarmUserStakedBalances(account);\n\n            case 8:\n              userStakedBalances = _context2.sent;\n              _context2.next = 11;\n              return fetchFarmUserEarnings(account);\n\n            case 11:\n              userFarmEarnings = _context2.sent;\n              arrayOfUserDataObjects = userFarmAllowances.map(function (farmAllowance, index) {\n                return {\n                  index: index,\n                  allowance: userFarmAllowances[index],\n                  tokenBalance: userFarmTokenBalances[index],\n                  stakedBalance: userStakedBalances[index],\n                  earnings: userFarmEarnings[index]\n                };\n              });\n              dispatch(setFarmUserData({\n                arrayOfUserDataObjects: arrayOfUserDataObjects\n              }));\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport default farmsSlice.reducer;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/state/farms/index.ts"],"names":["createSlice","farmsConfig","fetchFarms","fetchFarmUserEarnings","fetchFarmUserAllowances","fetchFarmUserTokenBalances","fetchFarmUserStakedBalances","initialState","data","farmsSlice","name","reducers","setFarmsPublicData","state","action","liveFarmsData","payload","map","farm","liveFarmData","find","f","pid","setFarmUserData","arrayOfUserDataObjects","forEach","userDataEl","index","userData","actions","fetchFarmsPublicDataAsync","dispatch","farms","fetchFarmUserDataAsync","account","userFarmAllowances","userFarmTokenBalances","userStakedBalances","userFarmEarnings","farmAllowance","allowance","tokenBalance","stakedBalance","earnings","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport farmsConfig from 'config/constants/farms'\r\nimport fetchFarms from './fetchFarms'\r\nimport {\r\n  fetchFarmUserEarnings,\r\n  fetchFarmUserAllowances,\r\n  fetchFarmUserTokenBalances,\r\n  fetchFarmUserStakedBalances,\r\n} from './fetchFarmUser'\r\nimport { FarmsState, Farm } from '../types'\r\n\r\nconst initialState: FarmsState = { data: [...farmsConfig] }\r\n\r\nexport const farmsSlice = createSlice({\r\n  name: 'Farms',\r\n  initialState,\r\n  reducers: {\r\n    setFarmsPublicData: (state, action) => {\r\n      const liveFarmsData: Farm[] = action.payload\r\n      state.data = state.data.map((farm) => {\r\n        const liveFarmData = liveFarmsData.find((f) => f.pid === farm.pid)\r\n        return { ...farm, ...liveFarmData }\r\n      })\r\n    },\r\n    setFarmUserData: (state, action) => {\r\n      const { arrayOfUserDataObjects } = action.payload\r\n      arrayOfUserDataObjects.forEach((userDataEl) => {\r\n        const { index } = userDataEl\r\n        state.data[index] = { ...state.data[index], userData: userDataEl }\r\n      })\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setFarmsPublicData, setFarmUserData } = farmsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchFarmsPublicDataAsync = () => async (dispatch) => {\r\n  const farms = await fetchFarms()\r\n  dispatch(setFarmsPublicData(farms))\r\n}\r\nexport const fetchFarmUserDataAsync = (account) => async (dispatch) => {\r\n  const userFarmAllowances = await fetchFarmUserAllowances(account)\r\n  const userFarmTokenBalances = await fetchFarmUserTokenBalances(account)\r\n  const userStakedBalances = await fetchFarmUserStakedBalances(account)\r\n  const userFarmEarnings = await fetchFarmUserEarnings(account)\r\n\r\n  const arrayOfUserDataObjects = userFarmAllowances.map((farmAllowance, index) => {\r\n    return {\r\n      index,\r\n      allowance: userFarmAllowances[index],\r\n      tokenBalance: userFarmTokenBalances[index],\r\n      stakedBalance: userStakedBalances[index],\r\n      earnings: userFarmEarnings[index],\r\n    }\r\n  })\r\n\r\n  dispatch(setFarmUserData({ arrayOfUserDataObjects }))\r\n}\r\n\r\nexport default farmsSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}