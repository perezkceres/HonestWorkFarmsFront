{"ast":null,"code":"import _slicedToArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from 'react';\nimport Web3 from 'web3';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport getRpcUrl from 'utils/getRpcUrl';\nvar RPC_URL = getRpcUrl();\nvar httpProvider = new Web3.providers.HttpProvider(RPC_URL, {\n  timeout: 10000\n});\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the ethereum provider change\r\n */\n\nvar useWeb3 = function useWeb3() {\n  _s();\n\n  var _useWallet = useWallet(),\n      ethereum = _useWallet.ethereum;\n\n  var refEth = useRef(ethereum);\n\n  var _useState = useState(new Web3(ethereum || httpProvider)),\n      _useState2 = _slicedToArray(_useState, 2),\n      web3 = _useState2[0],\n      setweb3 = _useState2[1];\n\n  useEffect(function () {\n    if (ethereum !== refEth.current) {\n      setweb3(new Web3(ethereum || httpProvider));\n      refEth.current = ethereum;\n    }\n  }, [ethereum]);\n  return web3;\n};\n\n_s(useWeb3, \"R2cRaQVwxeQI+pHjscPTq50xqIs=\", false, function () {\n  return [useWallet];\n});\n\nexport default useWeb3;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/hooks/useWeb3.ts"],"names":["useEffect","useState","useRef","Web3","useWallet","getRpcUrl","RPC_URL","httpProvider","providers","HttpProvider","timeout","useWeb3","ethereum","refEth","web3","setweb3","current"],"mappings":";;;;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AACA,OAAOC,IAAP,MAAiB,MAAjB;AAGA,SAASC,SAAT,QAA0B,+BAA1B;AACA,OAAOC,SAAP,MAAsB,iBAAtB;AAEA,IAAMC,OAAO,GAAGD,SAAS,EAAzB;AACA,IAAME,YAAY,GAAG,IAAIJ,IAAI,CAACK,SAAL,CAAeC,YAAnB,CAAgCH,OAAhC,EAAyC;AAAEI,EAAAA,OAAO,EAAE;AAAX,CAAzC,CAArB;AAEA;AACA;AACA;AACA;AACA;;AACA,IAAMC,OAAO,GAAG,SAAVA,OAAU,GAAM;AAAA;;AAAA,mBAC6BP,SAAS,EADtC;AAAA,MACZQ,QADY,cACZA,QADY;;AAEpB,MAAMC,MAAM,GAAGX,MAAM,CAACU,QAAD,CAArB;;AAFoB,kBAGIX,QAAQ,CAAC,IAAIE,IAAJ,CAASS,QAAQ,IAAIL,YAArB,CAAD,CAHZ;AAAA;AAAA,MAGbO,IAHa;AAAA,MAGPC,OAHO;;AAKpBf,EAAAA,SAAS,CAAC,YAAM;AACd,QAAIY,QAAQ,KAAKC,MAAM,CAACG,OAAxB,EAAiC;AAC/BD,MAAAA,OAAO,CAAC,IAAIZ,IAAJ,CAASS,QAAQ,IAAIL,YAArB,CAAD,CAAP;AACAM,MAAAA,MAAM,CAACG,OAAP,GAAiBJ,QAAjB;AACD;AACF,GALQ,EAKN,CAACA,QAAD,CALM,CAAT;AAOA,SAAOE,IAAP;AACD,CAbD;;GAAMH,O;UAC6CP,S;;;AAcnD,eAAeO,OAAf","sourcesContent":["import { useEffect, useState, useRef } from 'react'\r\nimport Web3 from 'web3'\r\nimport { HttpProviderOptions } from 'web3-core-helpers'\r\nimport { provider as ProviderType } from 'web3-core'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport getRpcUrl from 'utils/getRpcUrl'\r\n\r\nconst RPC_URL = getRpcUrl()\r\nconst httpProvider = new Web3.providers.HttpProvider(RPC_URL, { timeout: 10000 } as HttpProviderOptions)\r\n\r\n/**\r\n * Provides a web3 instance using the provider provided by useWallet\r\n * with a fallback of an httpProver\r\n * Recreate web3 instance only if the ethereum provider change\r\n */\r\nconst useWeb3 = () => {\r\n  const { ethereum }: { ethereum: ProviderType } = useWallet()\r\n  const refEth = useRef(ethereum)\r\n  const [web3, setweb3] = useState(new Web3(ethereum || httpProvider))\r\n\r\n  useEffect(() => {\r\n    if (ethereum !== refEth.current) {\r\n      setweb3(new Web3(ethereum || httpProvider))\r\n      refEth.current = ethereum\r\n    }\r\n  }, [ethereum])\r\n\r\n  return web3\r\n}\r\n\r\nexport default useWeb3\r\n"]},"metadata":{},"sourceType":"module"}