{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _defineProperty from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _objectSpread from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";\nimport _toConsumableArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\n\n/* eslint-disable no-param-reassign */\nimport { createSlice } from '@reduxjs/toolkit';\nimport poolsConfig from 'config/constants/pools';\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStaking } from './fetchPools';\nimport { fetchPoolsAllowance, fetchUserBalances, fetchUserStakeBalances, fetchUserPendingRewards } from './fetchPoolsUser';\nvar initialState = {\n  data: _toConsumableArray(poolsConfig)\n};\nexport var PoolsSlice = createSlice({\n  name: 'Pools',\n  initialState: initialState,\n  reducers: {\n    setPoolsPublicData: function setPoolsPublicData(state, action) {\n      var livePoolsData = action.payload;\n      state.data = state.data.map(function (pool) {\n        var livePoolData = livePoolsData.find(function (entry) {\n          return entry.sousId === pool.sousId;\n        });\n        return _objectSpread(_objectSpread({}, pool), livePoolData);\n      });\n    },\n    setPoolsUserData: function setPoolsUserData(state, action) {\n      var userData = action.payload;\n      state.data = state.data.map(function (pool) {\n        var userPoolData = userData.find(function (entry) {\n          return entry.sousId === pool.sousId;\n        });\n        return _objectSpread(_objectSpread({}, pool), {}, {\n          userData: userPoolData\n        });\n      });\n    },\n    updatePoolsUserData: function updatePoolsUserData(state, action) {\n      var _state$data$index;\n\n      var _action$payload = action.payload,\n          field = _action$payload.field,\n          value = _action$payload.value,\n          sousId = _action$payload.sousId;\n      var index = state.data.findIndex(function (p) {\n        return p.sousId === sousId;\n      });\n      state.data[index] = _objectSpread(_objectSpread({}, state.data[index]), {}, {\n        userData: _objectSpread(_objectSpread({}, (_state$data$index = state.data[index]) === null || _state$data$index === void 0 ? void 0 : _state$data$index.userData), {}, _defineProperty({}, field, value))\n      });\n    }\n  }\n}); // Actions\n\nvar _PoolsSlice$actions = PoolsSlice.actions,\n    setPoolsPublicData = _PoolsSlice$actions.setPoolsPublicData,\n    setPoolsUserData = _PoolsSlice$actions.setPoolsUserData,\n    updatePoolsUserData = _PoolsSlice$actions.updatePoolsUserData; // Thunks\n\nexport { setPoolsPublicData, setPoolsUserData, updatePoolsUserData };\nexport var fetchPoolsPublicDataAsync = function fetchPoolsPublicDataAsync() {\n  return /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch) {\n      var blockLimits, totalStakings, liveData;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return fetchPoolsBlockLimits();\n\n            case 2:\n              blockLimits = _context.sent;\n              _context.next = 5;\n              return fetchPoolsTotalStaking();\n\n            case 5:\n              totalStakings = _context.sent;\n              liveData = poolsConfig.map(function (pool) {\n                var blockLimit = blockLimits.find(function (entry) {\n                  return entry.sousId === pool.sousId;\n                });\n                var totalStaking = totalStakings.find(function (entry) {\n                  return entry.sousId === pool.sousId;\n                });\n                return _objectSpread(_objectSpread({}, blockLimit), totalStaking);\n              });\n              dispatch(setPoolsPublicData(liveData));\n\n            case 8:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n};\nexport var fetchPoolsUserDataAsync = function fetchPoolsUserDataAsync(account) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(dispatch) {\n      var allowances, stakingTokenBalances, stakedBalances, pendingRewards, userData;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return fetchPoolsAllowance(account);\n\n            case 2:\n              allowances = _context2.sent;\n              _context2.next = 5;\n              return fetchUserBalances(account);\n\n            case 5:\n              stakingTokenBalances = _context2.sent;\n              _context2.next = 8;\n              return fetchUserStakeBalances(account);\n\n            case 8:\n              stakedBalances = _context2.sent;\n              _context2.next = 11;\n              return fetchUserPendingRewards(account);\n\n            case 11:\n              pendingRewards = _context2.sent;\n              userData = poolsConfig.map(function (pool) {\n                return {\n                  sousId: pool.sousId,\n                  allowance: allowances[pool.sousId],\n                  stakingTokenBalance: stakingTokenBalances[pool.sousId],\n                  stakedBalance: stakedBalances[pool.sousId],\n                  pendingReward: pendingRewards[pool.sousId]\n                };\n              });\n              dispatch(setPoolsUserData(userData));\n\n            case 14:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n};\nexport var updateUserAllowance = function updateUserAllowance(sousId, account) {\n  return /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(dispatch) {\n      var allowances;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return fetchPoolsAllowance(account);\n\n            case 2:\n              allowances = _context3.sent;\n              dispatch(updatePoolsUserData({\n                sousId: sousId,\n                field: 'allowance',\n                value: allowances[sousId]\n              }));\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n};\nexport var updateUserBalance = function updateUserBalance(sousId, account) {\n  return /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(dispatch) {\n      var tokenBalances;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return fetchUserBalances(account);\n\n            case 2:\n              tokenBalances = _context4.sent;\n              dispatch(updatePoolsUserData({\n                sousId: sousId,\n                field: 'stakingTokenBalance',\n                value: tokenBalances[sousId]\n              }));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n};\nexport var updateUserStakedBalance = function updateUserStakedBalance(sousId, account) {\n  return /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(dispatch) {\n      var stakedBalances;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return fetchUserStakeBalances(account);\n\n            case 2:\n              stakedBalances = _context5.sent;\n              dispatch(updatePoolsUserData({\n                sousId: sousId,\n                field: 'stakedBalance',\n                value: stakedBalances[sousId]\n              }));\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }));\n\n    return function (_x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n};\nexport var updateUserPendingReward = function updateUserPendingReward(sousId, account) {\n  return /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(dispatch) {\n      var pendingRewards;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return fetchUserPendingRewards(account);\n\n            case 2:\n              pendingRewards = _context6.sent;\n              dispatch(updatePoolsUserData({\n                sousId: sousId,\n                field: 'pendingReward',\n                value: pendingRewards[sousId]\n              }));\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n\n    return function (_x6) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n};\nexport default PoolsSlice.reducer;","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/state/pools/index.ts"],"names":["createSlice","poolsConfig","fetchPoolsBlockLimits","fetchPoolsTotalStaking","fetchPoolsAllowance","fetchUserBalances","fetchUserStakeBalances","fetchUserPendingRewards","initialState","data","PoolsSlice","name","reducers","setPoolsPublicData","state","action","livePoolsData","payload","map","pool","livePoolData","find","entry","sousId","setPoolsUserData","userData","userPoolData","updatePoolsUserData","field","value","index","findIndex","p","actions","fetchPoolsPublicDataAsync","dispatch","blockLimits","totalStakings","liveData","blockLimit","totalStaking","fetchPoolsUserDataAsync","account","allowances","stakingTokenBalances","stakedBalances","pendingRewards","allowance","stakingTokenBalance","stakedBalance","pendingReward","updateUserAllowance","updateUserBalance","tokenBalances","updateUserStakedBalance","updateUserPendingReward","reducer"],"mappings":"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","sourcesContent":["/* eslint-disable no-param-reassign */\r\nimport { createSlice } from '@reduxjs/toolkit'\r\nimport poolsConfig from 'config/constants/pools'\r\nimport { fetchPoolsBlockLimits, fetchPoolsTotalStaking } from './fetchPools'\r\nimport {\r\n  fetchPoolsAllowance,\r\n  fetchUserBalances,\r\n  fetchUserStakeBalances,\r\n  fetchUserPendingRewards,\r\n} from './fetchPoolsUser'\r\nimport { PoolsState, Pool } from '../types'\r\n\r\nconst initialState: PoolsState = { data: [...poolsConfig] }\r\n\r\nexport const PoolsSlice = createSlice({\r\n  name: 'Pools',\r\n  initialState,\r\n  reducers: {\r\n    setPoolsPublicData: (state, action) => {\r\n      const livePoolsData: Pool[] = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const livePoolData = livePoolsData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, ...livePoolData }\r\n      })\r\n    },\r\n    setPoolsUserData: (state, action) => {\r\n      const userData = action.payload\r\n      state.data = state.data.map((pool) => {\r\n        const userPoolData = userData.find((entry) => entry.sousId === pool.sousId)\r\n        return { ...pool, userData: userPoolData }\r\n      })\r\n    },\r\n    updatePoolsUserData: (state, action) => {\r\n      const { field, value, sousId } = action.payload\r\n      const index = state.data.findIndex((p) => p.sousId === sousId)\r\n      state.data[index] = { ...state.data[index], userData: { ...state.data[index]?.userData, [field]: value } }\r\n    },\r\n  },\r\n})\r\n\r\n// Actions\r\nexport const { setPoolsPublicData, setPoolsUserData, updatePoolsUserData } = PoolsSlice.actions\r\n\r\n// Thunks\r\nexport const fetchPoolsPublicDataAsync = () => async (dispatch) => {\r\n  const blockLimits = await fetchPoolsBlockLimits()\r\n  const totalStakings = await fetchPoolsTotalStaking()\r\n  const liveData = poolsConfig.map((pool) => {\r\n    const blockLimit = blockLimits.find((entry) => entry.sousId === pool.sousId)\r\n    const totalStaking = totalStakings.find((entry) => entry.sousId === pool.sousId)\r\n    return {\r\n      ...blockLimit,\r\n      ...totalStaking,\r\n    }\r\n  })\r\n\r\n  dispatch(setPoolsPublicData(liveData))\r\n}\r\n\r\nexport const fetchPoolsUserDataAsync = (account) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  const stakingTokenBalances = await fetchUserBalances(account)\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n\r\n  const userData = poolsConfig.map((pool) => ({\r\n    sousId: pool.sousId,\r\n    allowance: allowances[pool.sousId],\r\n    stakingTokenBalance: stakingTokenBalances[pool.sousId],\r\n    stakedBalance: stakedBalances[pool.sousId],\r\n    pendingReward: pendingRewards[pool.sousId],\r\n  }))\r\n\r\n  dispatch(setPoolsUserData(userData))\r\n}\r\n\r\nexport const updateUserAllowance = (sousId: string, account: string) => async (dispatch) => {\r\n  const allowances = await fetchPoolsAllowance(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'allowance', value: allowances[sousId] }))\r\n}\r\n\r\nexport const updateUserBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const tokenBalances = await fetchUserBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakingTokenBalance', value: tokenBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserStakedBalance = (sousId: string, account: string) => async (dispatch) => {\r\n  const stakedBalances = await fetchUserStakeBalances(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'stakedBalance', value: stakedBalances[sousId] }))\r\n}\r\n\r\nexport const updateUserPendingReward = (sousId: string, account: string) => async (dispatch) => {\r\n  const pendingRewards = await fetchUserPendingRewards(account)\r\n  dispatch(updatePoolsUserData({ sousId, field: 'pendingReward', value: pendingRewards[sousId] }))\r\n}\r\n\r\nexport default PoolsSlice.reducer\r\n"]},"metadata":{},"sourceType":"module"}