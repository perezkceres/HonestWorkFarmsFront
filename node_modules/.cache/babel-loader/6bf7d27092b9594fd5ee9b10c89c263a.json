{"ast":null,"code":"import _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$(),\n    _s4 = $RefreshSig$(),\n    _s5 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { ethers } from 'ethers';\nimport { useDispatch } from 'react-redux';\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions';\nimport { approve } from 'utils/callHelpers';\nimport { useMasterchef, useCake, useLottery, useSmartChef, useForest } from './useContract'; // Approve a Farm\n\nexport var useApprove = function useApprove(lpContract) {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account;\n\n  var masterChefContract = useMasterchef();\n  var handleApprove = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.prev = 0;\n            _context.next = 3;\n            return approve(lpContract, masterChefContract, account);\n\n          case 3:\n            tx = _context.sent;\n            dispatch(fetchFarmUserDataAsync(account));\n            return _context.abrupt(\"return\", tx);\n\n          case 8:\n            _context.prev = 8;\n            _context.t0 = _context[\"catch\"](0);\n            return _context.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[0, 8]]);\n  })), [account, dispatch, lpContract, masterChefContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve a Pool\n\n_s(useApprove, \"912YkJ6AGYumCBnuye56mVxNDwo=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport var useSousApprove = function useSousApprove(lpContract, sousId) {\n  _s2();\n\n  var dispatch = useDispatch();\n\n  var _useWallet2 = useWallet(),\n      account = _useWallet2.account;\n\n  var smartChefContract = useSmartChef(sousId);\n  var handleApprove = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return approve(lpContract, smartChefContract, account);\n\n          case 3:\n            tx = _context2.sent;\n            dispatch(updateUserAllowance(String(sousId), account));\n            return _context2.abrupt(\"return\", tx);\n\n          case 8:\n            _context2.prev = 8;\n            _context2.t0 = _context2[\"catch\"](0);\n            return _context2.abrupt(\"return\", false);\n\n          case 11:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, null, [[0, 8]]);\n  })), [account, dispatch, lpContract, smartChefContract, sousId]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve the lottery\n\n_s2(useSousApprove, \"Qia2+sTf06YTIta1Ysv7oxao7Zo=\", false, function () {\n  return [useDispatch, useWallet, useSmartChef];\n});\n\nexport var useLotteryApprove = function useLotteryApprove() {\n  _s3();\n\n  var _useWallet3 = useWallet(),\n      account = _useWallet3.account;\n\n  var cakeContract = useCake();\n  var lotteryContract = useLottery();\n  var handleApprove = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            _context3.prev = 0;\n            _context3.next = 3;\n            return approve(cakeContract, lotteryContract, account);\n\n          case 3:\n            tx = _context3.sent;\n            return _context3.abrupt(\"return\", tx);\n\n          case 7:\n            _context3.prev = 7;\n            _context3.t0 = _context3[\"catch\"](0);\n            return _context3.abrupt(\"return\", false);\n\n          case 10:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, null, [[0, 7]]);\n  })), [account, cakeContract, lotteryContract]);\n  return {\n    onApprove: handleApprove\n  };\n}; // Approve an IFO\n\n_s3(useLotteryApprove, \"qmmDwizDBCPS/KQkbYFMkBrCi+A=\", false, function () {\n  return [useWallet, useCake, useLottery];\n});\n\nexport var useIfoApprove = function useIfoApprove(tokenContract, spenderAddress) {\n  _s4();\n\n  var _useWallet4 = useWallet(),\n      account = _useWallet4.account;\n\n  var onApprove = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n      while (1) {\n        switch (_context4.prev = _context4.next) {\n          case 0:\n            _context4.prev = 0;\n            _context4.next = 3;\n            return tokenContract.methods.approve(spenderAddress, ethers.constants.MaxUint256).send({\n              from: account\n            });\n\n          case 3:\n            tx = _context4.sent;\n            return _context4.abrupt(\"return\", tx);\n\n          case 7:\n            _context4.prev = 7;\n            _context4.t0 = _context4[\"catch\"](0);\n            return _context4.abrupt(\"return\", false);\n\n          case 10:\n          case \"end\":\n            return _context4.stop();\n        }\n      }\n    }, _callee4, null, [[0, 7]]);\n  })), [account, spenderAddress, tokenContract]);\n  return onApprove;\n}; // Approve the forest\n\n_s4(useIfoApprove, \"5YEWPx3HiFEhK5UYbT6NzOlDPbw=\", false, function () {\n  return [useWallet];\n});\n\nexport var useForestApprove = function useForestApprove() {\n  _s5();\n\n  var _useWallet5 = useWallet(),\n      account = _useWallet5.account;\n\n  var cakeContract = useCake();\n  var forestContract = useForest();\n  var handleApprove = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n    var tx;\n    return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n      while (1) {\n        switch (_context5.prev = _context5.next) {\n          case 0:\n            _context5.prev = 0;\n            _context5.next = 3;\n            return approve(cakeContract, forestContract, account);\n\n          case 3:\n            tx = _context5.sent;\n            return _context5.abrupt(\"return\", tx);\n\n          case 7:\n            _context5.prev = 7;\n            _context5.t0 = _context5[\"catch\"](0);\n            return _context5.abrupt(\"return\", false);\n\n          case 10:\n          case \"end\":\n            return _context5.stop();\n        }\n      }\n    }, _callee5, null, [[0, 7]]);\n  })), [account, cakeContract, forestContract]);\n  return {\n    onApprove: handleApprove\n  };\n};\n\n_s5(useForestApprove, \"N3KUfORY9R883u1b4xndC6ZxPqQ=\", false, function () {\n  return [useWallet, useCake, useForest];\n});","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/hooks/useApprove.ts"],"names":["useCallback","useWallet","ethers","useDispatch","updateUserAllowance","fetchFarmUserDataAsync","approve","useMasterchef","useCake","useLottery","useSmartChef","useForest","useApprove","lpContract","dispatch","account","masterChefContract","handleApprove","tx","onApprove","useSousApprove","sousId","smartChefContract","String","useLotteryApprove","cakeContract","lotteryContract","useIfoApprove","tokenContract","spenderAddress","methods","constants","MaxUint256","send","from","useForestApprove","forestContract"],"mappings":"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","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { Contract } from 'web3-eth-contract'\r\nimport { ethers } from 'ethers'\r\nimport { useDispatch } from 'react-redux'\r\nimport { updateUserAllowance, fetchFarmUserDataAsync } from 'state/actions'\r\nimport { approve } from 'utils/callHelpers'\r\nimport { useMasterchef, useCake, useLottery, useSmartChef, useForest } from './useContract'\r\n\r\n// Approve a Farm\r\nexport const useApprove = (lpContract: Contract) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, masterChefContract, account)\r\n      dispatch(fetchFarmUserDataAsync(account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, masterChefContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n// Approve a Pool\r\nexport const useSousApprove = (lpContract: Contract, sousId: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account }: { account: string } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(lpContract, smartChefContract, account)\r\n      dispatch(updateUserAllowance(String(sousId), account))\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, dispatch, lpContract, smartChefContract, sousId])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve the lottery\r\nexport const useLotteryApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const lotteryContract = useLottery()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, lotteryContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, lotteryContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n\r\n// Approve an IFO\r\nexport const useIfoApprove = (tokenContract: Contract, spenderAddress: string) => {\r\n  const { account } = useWallet()\r\n  const onApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await tokenContract.methods\r\n        .approve(spenderAddress, ethers.constants.MaxUint256)\r\n        .send({ from: account })\r\n      return tx\r\n    } catch {\r\n      return false\r\n    }\r\n  }, [account, spenderAddress, tokenContract])\r\n\r\n  return onApprove\r\n}\r\n\r\n// Approve the forest\r\nexport const useForestApprove = () => {\r\n  const { account }: { account: string } = useWallet()\r\n  const cakeContract = useCake()\r\n  const forestContract = useForest()\r\n\r\n  const handleApprove = useCallback(async () => {\r\n    try {\r\n      const tx = await approve(cakeContract, forestContract, account)\r\n      return tx\r\n    } catch (e) {\r\n      return false\r\n    }\r\n  }, [account, cakeContract, forestContract])\r\n\r\n  return { onApprove: handleApprove }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}