{"ast":null,"code":"import _toConsumableArray from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nvar _s = $RefreshSig$(),\n    _s2 = $RefreshSig$(),\n    _s3 = $RefreshSig$();\n\nimport { useCallback } from 'react';\nimport { useWallet } from '@binance-chain/bsc-use-wallet';\nimport { useDispatch } from 'react-redux';\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions';\nimport { smartHarvest, smartHarvestBnb, harvest } from 'utils/callHelpers';\nimport { useMasterchef, useSmartChef } from './useContract';\nexport var useHarvest = function useHarvest(farmPid) {\n  _s();\n\n  var dispatch = useDispatch();\n\n  var _useWallet = useWallet(),\n      account = _useWallet.account;\n\n  var masterChefContract = useMasterchef();\n  var handleHarvest = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var txHash;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return harvest(masterChefContract, farmPid, account);\n\n          case 2:\n            txHash = _context.sent;\n            dispatch(fetchFarmUserDataAsync(account));\n            return _context.abrupt(\"return\", txHash);\n\n          case 5:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  })), [account, dispatch, farmPid, masterChefContract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s(useHarvest, \"UT4quCg5r96YBGnHn7yg5VONUdg=\", false, function () {\n  return [useDispatch, useWallet, useMasterchef];\n});\n\nexport var useAllHarvest = function useAllHarvest(farmPids) {\n  _s2();\n\n  var _useWallet2 = useWallet(),\n      account = _useWallet2.account;\n\n  var masterChefContract = useMasterchef();\n  var handleHarvest = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var harvestPromises;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            harvestPromises = farmPids.reduce(function (accum, pid) {\n              return [].concat(_toConsumableArray(accum), [harvest(masterChefContract, pid, account)]);\n            }, []);\n            return _context2.abrupt(\"return\", Promise.all(harvestPromises));\n\n          case 2:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  })), [account, farmPids, masterChefContract]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s2(useAllHarvest, \"MxLQ/Cd4zmOMdglbbhX6+hOW2K0=\", false, function () {\n  return [useWallet, useMasterchef];\n});\n\nexport var useSmartChefHarvest = function useSmartChefHarvest(sousId) {\n  _s3();\n\n  var isUsingBnb = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  var dispatch = useDispatch();\n\n  var _useWallet3 = useWallet(),\n      account = _useWallet3.account;\n\n  var smartChefContract = useSmartChef(sousId);\n  var handleHarvest = useCallback( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var harvestFn;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            harvestFn = isUsingBnb ? smartHarvestBnb : smartHarvest;\n            _context3.next = 3;\n            return harvestFn(smartChefContract, account);\n\n          case 3:\n            dispatch(updateUserPendingReward(sousId, account));\n            dispatch(updateUserBalance(sousId, account));\n\n          case 5:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  })), [account, dispatch, isUsingBnb, smartChefContract, sousId]);\n  return {\n    onReward: handleHarvest\n  };\n};\n\n_s3(useSmartChefHarvest, \"sEBq/v6rYgIp1Ul5nBKdght9EcY=\", false, function () {\n  return [useDispatch, useWallet, useSmartChef];\n});","map":{"version":3,"sources":["/Users/ivopascoal/Desktop/FARMBOY/HonestWorkFarms/src/hooks/useHarvest.ts"],"names":["useCallback","useWallet","useDispatch","fetchFarmUserDataAsync","updateUserBalance","updateUserPendingReward","smartHarvest","smartHarvestBnb","harvest","useMasterchef","useSmartChef","useHarvest","farmPid","dispatch","account","masterChefContract","handleHarvest","txHash","onReward","useAllHarvest","farmPids","harvestPromises","reduce","accum","pid","Promise","all","useSmartChefHarvest","sousId","isUsingBnb","smartChefContract","harvestFn"],"mappings":";;;;;;;;AAAA,SAASA,WAAT,QAA4B,OAA5B;AACA,SAASC,SAAT,QAA0B,+BAA1B;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,sBAAT,EAAiCC,iBAAjC,EAAoDC,uBAApD,QAAmF,eAAnF;AACA,SAASC,YAAT,EAAuBC,eAAvB,EAAwCC,OAAxC,QAAuD,mBAAvD;AACA,SAASC,aAAT,EAAwBC,YAAxB,QAA4C,eAA5C;AAEA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,CAACC,OAAD,EAAqB;AAAA;;AAC7C,MAAMC,QAAQ,GAAGX,WAAW,EAA5B;;AAD6C,mBAEzBD,SAAS,EAFgB;AAAA,MAErCa,OAFqC,cAErCA,OAFqC;;AAG7C,MAAMC,kBAAkB,GAAGN,aAAa,EAAxC;AAEA,MAAMO,aAAa,GAAGhB,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBACXQ,OAAO,CAACO,kBAAD,EAAqBH,OAArB,EAA8BE,OAA9B,CADI;;AAAA;AAC1BG,YAAAA,MAD0B;AAEhCJ,YAAAA,QAAQ,CAACV,sBAAsB,CAACW,OAAD,CAAvB,CAAR;AAFgC,6CAGzBG,MAHyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAI9B,CAACH,OAAD,EAAUD,QAAV,EAAoBD,OAApB,EAA6BG,kBAA7B,CAJ8B,CAAjC;AAMA,SAAO;AAAEG,IAAAA,QAAQ,EAAEF;AAAZ,GAAP;AACD,CAZM;;GAAML,U;UACMT,W,EACGD,S,EACOQ,a;;;AAW7B,OAAO,IAAMU,aAAa,GAAG,SAAhBA,aAAgB,CAACC,QAAD,EAAwB;AAAA;;AAAA,oBAC/BnB,SAAS,EADsB;AAAA,MAC3Ca,OAD2C,eAC3CA,OAD2C;;AAEnD,MAAMC,kBAAkB,GAAGN,aAAa,EAAxC;AAEA,MAAMO,aAAa,GAAGhB,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BqB,YAAAA,eAD0B,GACRD,QAAQ,CAACE,MAAT,CAAgB,UAACC,KAAD,EAAQC,GAAR,EAAgB;AACtD,kDAAWD,KAAX,IAAkBf,OAAO,CAACO,kBAAD,EAAqBS,GAArB,EAA0BV,OAA1B,CAAzB;AACD,aAFuB,EAErB,EAFqB,CADQ;AAAA,8CAKzBW,OAAO,CAACC,GAAR,CAAYL,eAAZ,CALyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAM9B,CAACP,OAAD,EAAUM,QAAV,EAAoBL,kBAApB,CAN8B,CAAjC;AAQA,SAAO;AAAEG,IAAAA,QAAQ,EAAEF;AAAZ,GAAP;AACD,CAbM;;IAAMG,a;UACSlB,S,EACOQ,a;;;AAa7B,OAAO,IAAMkB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,MAAD,EAAgC;AAAA;;AAAA,MAAvBC,UAAuB,uEAAV,KAAU;AACjE,MAAMhB,QAAQ,GAAGX,WAAW,EAA5B;;AADiE,oBAE7CD,SAAS,EAFoC;AAAA,MAEzDa,OAFyD,eAEzDA,OAFyD;;AAGjE,MAAMgB,iBAAiB,GAAGpB,YAAY,CAACkB,MAAD,CAAtC;AAEA,MAAMZ,aAAa,GAAGhB,WAAW,wEAAC;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1B+B,YAAAA,SAD0B,GACdF,UAAU,GAAGtB,eAAH,GAAqBD,YADjB;AAAA;AAAA,mBAE1ByB,SAAS,CAACD,iBAAD,EAAoBhB,OAApB,CAFiB;;AAAA;AAGhCD,YAAAA,QAAQ,CAACR,uBAAuB,CAACuB,MAAD,EAASd,OAAT,CAAxB,CAAR;AACAD,YAAAA,QAAQ,CAACT,iBAAiB,CAACwB,MAAD,EAASd,OAAT,CAAlB,CAAR;;AAJgC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAD,IAK9B,CAACA,OAAD,EAAUD,QAAV,EAAoBgB,UAApB,EAAgCC,iBAAhC,EAAmDF,MAAnD,CAL8B,CAAjC;AAOA,SAAO;AAAEV,IAAAA,QAAQ,EAAEF;AAAZ,GAAP;AACD,CAbM;;IAAMW,mB;UACMzB,W,EACGD,S,EACMS,Y","sourcesContent":["import { useCallback } from 'react'\r\nimport { useWallet } from '@binance-chain/bsc-use-wallet'\r\nimport { useDispatch } from 'react-redux'\r\nimport { fetchFarmUserDataAsync, updateUserBalance, updateUserPendingReward } from 'state/actions'\r\nimport { smartHarvest, smartHarvestBnb, harvest } from 'utils/callHelpers'\r\nimport { useMasterchef, useSmartChef } from './useContract'\r\n\r\nexport const useHarvest = (farmPid: number) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const txHash = await harvest(masterChefContract, farmPid, account)\r\n    dispatch(fetchFarmUserDataAsync(account))\r\n    return txHash\r\n  }, [account, dispatch, farmPid, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useAllHarvest = (farmPids: number[]) => {\r\n  const { account } = useWallet()\r\n  const masterChefContract = useMasterchef()\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestPromises = farmPids.reduce((accum, pid) => {\r\n      return [...accum, harvest(masterChefContract, pid, account)]\r\n    }, [])\r\n\r\n    return Promise.all(harvestPromises)\r\n  }, [account, farmPids, masterChefContract])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n\r\nexport const useSmartChefHarvest = (sousId, isUsingBnb = false) => {\r\n  const dispatch = useDispatch()\r\n  const { account } = useWallet()\r\n  const smartChefContract = useSmartChef(sousId)\r\n\r\n  const handleHarvest = useCallback(async () => {\r\n    const harvestFn = isUsingBnb ? smartHarvestBnb : smartHarvest\r\n    await harvestFn(smartChefContract, account)\r\n    dispatch(updateUserPendingReward(sousId, account))\r\n    dispatch(updateUserBalance(sousId, account))\r\n  }, [account, dispatch, isUsingBnb, smartChefContract, sousId])\r\n\r\n  return { onReward: handleHarvest }\r\n}\r\n"]},"metadata":{},"sourceType":"module"}